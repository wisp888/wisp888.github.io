<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang iris 学习一: 使用MVC模式+Mongo数据库</title>
    <url>/2019/11/22/golang-iris-%E5%AD%A6%E4%B9%A0%E4%B8%80-%E4%BD%BF%E7%94%A8MVC%E6%A8%A1%E5%BC%8F-Mongo%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>最近有时间，重新把Golang学习了一下，得搞点东西练练手，看着能不能用Golang Iris把Python Flask的后台重写一下，刚好golang更新了mod模式，试用一把！！！<br>系统环境：ubuntu18.04<br>golang版本：1.13<br>mongo: 随便docker run出来的</p>
<a id="more"></a>

<p>目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   └── config.go</span><br><span class="line">├── config.yml</span><br><span class="line">├── controllers</span><br><span class="line">│   └── game_controller.go</span><br><span class="line">├── datamodels</span><br><span class="line">│   ├── game.go</span><br><span class="line">│   └── response.go</span><br><span class="line">├── datasource</span><br><span class="line">│   └── mongo.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">├── repo</span><br><span class="line">│   └── game_repo.go</span><br><span class="line">├── route</span><br><span class="line">│   └── route.go</span><br><span class="line">└── services</span><br><span class="line">    └── game_service.go</span><br></pre></td></tr></table></figure>

<p>先定义一个模型吧，就是跟Python SQLALCHEMY的数据库结构一个道理，来个简单的走起：</p>
<p>datamodels目录存放数据模型</p>
<p>datamodels/game.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datamodels</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Game <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       bson.ObjectId <span class="string">`json:"_id" bson:"_id"`</span></span><br><span class="line">    Name     <span class="keyword">string</span>        <span class="string">`json:"name" bson:"name"`</span></span><br><span class="line">    GameCode <span class="keyword">string</span>        <span class="string">`json:"gamecode" bson:"gamecode"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个通用数据返回模型，返回给前端用的</p>
<p>datamodels/response.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datamodels</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code <span class="keyword">int</span>         <span class="string">`json:"code"`</span></span><br><span class="line">	Msg  <span class="keyword">string</span>      <span class="string">`json:"msg"`</span></span><br><span class="line">	Data <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"data"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后得连接数据库，先搞份数据库配置：</p>
<p>config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mongo:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">~</span></span><br><span class="line"><span class="attr">  pass:</span> <span class="string">~</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">oms</span></span><br></pre></td></tr></table></figure>

<p>然后把配置文件转成结构体</p>
<p>config/config.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"gopkg.in/yaml.v2"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mongoConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Host <span class="keyword">string</span> <span class="string">`yaml:"host"`</span></span><br><span class="line">	Port <span class="keyword">int</span>    <span class="string">`yaml:"port"`</span></span><br><span class="line">	User <span class="keyword">string</span> <span class="string">`yaml:"user"`</span></span><br><span class="line">	Pass <span class="keyword">string</span> <span class="string">`yaml:"pass"`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`yaml:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> globalConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Mongo mongoConfig <span class="string">`yaml:"mongo"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> GConfig = &amp;globalConfig&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	yamlFile, err := ioutil.ReadFile(<span class="string">"config.yml"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err = yaml.Unmarshal(yamlFile, GConfig)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Unmarshal: %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着需要连接数据库</p>
<p>datasource目录存放初始化数据库连接</p>
<p>datasource/mongo.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"goms/config"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	session *mgo.Session</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dialInfo := &amp;mgo.DialInfo&#123;</span><br><span class="line">		Addrs:          []<span class="keyword">string</span>&#123;config.GConfig.Mongo.Host&#125;,</span><br><span class="line">		Direct:         <span class="literal">false</span>,</span><br><span class="line">		Timeout:        time.Second * <span class="number">60</span>,</span><br><span class="line">		FailFast:       <span class="literal">false</span>,</span><br><span class="line">		Database:       config.GConfig.Mongo.Name,</span><br><span class="line">		ReplicaSetName: <span class="string">""</span>,</span><br><span class="line">		Source:         <span class="string">""</span>,</span><br><span class="line">		Service:        <span class="string">""</span>,</span><br><span class="line">		ServiceHost:    <span class="string">""</span>,</span><br><span class="line">		Mechanism:      <span class="string">""</span>,</span><br><span class="line">		Username:       <span class="string">""</span>,</span><br><span class="line">		Password:       <span class="string">""</span>,</span><br><span class="line">		PoolLimit:      <span class="number">4096</span>,</span><br><span class="line">		DialServer:     <span class="literal">nil</span>,</span><br><span class="line">		Dial:           <span class="literal">nil</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	sess, err := mgo.DialWithInfo(dialInfo)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	session = sess</span><br><span class="line">	session.SetMode(mgo.Monotonic, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SessionStore <span class="keyword">struct</span> &#123;</span><br><span class="line">	session *mgo.Session</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSessionStore</span><span class="params">()</span> *<span class="title">SessionStore</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;SessionStore&#123;</span><br><span class="line">		session: session.Copy(),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SessionStore)</span> <span class="title">C</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">mgo</span>.<span class="title">Collection</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.session.DB(config.GConfig.Mongo.Name).C(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SessionStore)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s.session.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetErrNotFound</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> mgo.ErrNotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来个CRUD操作</p>
<p>repo目录存放操作数据库的方法</p>
<p>repo/game_repo.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> repo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/datasource"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GamesRepository <span class="keyword">interface</span> &#123;</span><br><span class="line">	List(query <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) (games []datamodels.Game, err error)</span><br><span class="line">	Save(game datamodels.Game) (err error)</span><br><span class="line">	GetByID(id <span class="keyword">string</span>) (game datamodels.Game, err error)</span><br><span class="line">	DeleteByID(id <span class="keyword">string</span>) (err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> gamesRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">	collection <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGamesRepository</span><span class="params">()</span> <span class="title">GamesRepository</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;gamesRepository&#123;</span><br><span class="line">		collection: <span class="string">"project_games"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">List</span><span class="params">(query <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(games []datamodels.Game, err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err = col.Find(<span class="literal">nil</span>).All(&amp;games); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err.Error() != datasource.GetErrNotFound().Error() &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">Save</span><span class="params">(game datamodels.Game)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> game.ID.Hex() == <span class="string">""</span> &#123;</span><br><span class="line">		game.ID = bson.NewObjectId()</span><br><span class="line">		err = col.Insert(game)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		err = col.Update(bson.M&#123;<span class="string">"_id"</span>: game.ID&#125;, game)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">GetByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(game datamodels.Game, err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	err = col.FindId(bson.ObjectIdHex(id)).One(&amp;game)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">DeleteByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	err = col.RemoveId(bson.ObjectIdHex(id))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service目录调用repo方法得出最后的结果并整理</p>
<p>service/game_service.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/repo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GameService <span class="keyword">interface</span> &#123;</span><br><span class="line">	List(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) (response datamodels.Response)</span><br><span class="line">	Save(game datamodels.Game) (response datamodels.Response)</span><br><span class="line">	GetByID(id <span class="keyword">string</span>) (response datamodels.Response)</span><br><span class="line">	DeleteByID(id <span class="keyword">string</span>) (response datamodels.Response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> gameService <span class="keyword">struct</span> &#123;</span><br><span class="line">	repo repo.GamesRepository</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gameRepo = repo.NewGamesRepository()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGameService</span><span class="params">()</span> <span class="title">GameService</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;gameService&#123;</span><br><span class="line">		repo: gameRepo,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">List</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	games, _ := g.repo.List(<span class="literal">nil</span>)</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	response.Data = games</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">Save</span><span class="params">(game datamodels.Game)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	err := g.repo.Save(game)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">30001</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"保存数据失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">GetByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	game, err := g.repo.GetByID(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">30002</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"查询数据失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	response.Data = game</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">DeleteByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	err := g.repo.DeleteByID(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">30003</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"删除数据失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controllers响应Web请求</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris"</span></span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/services"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GameController <span class="keyword">struct</span> &#123;</span><br><span class="line">	Ctx     iris.Context</span><br><span class="line">	Service services.GameService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGameController</span><span class="params">()</span> *<span class="title">GameController</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;GameController&#123;</span><br><span class="line">		Service: services.NewGameService(),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">Get</span><span class="params">()</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> g.Service.List(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">GetBy</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> g.Service.GetByID(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">DeleteBy</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> g.Service.DeleteByID(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">PutBy</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	game := datamodels.Game&#123;&#125;</span><br><span class="line">	err := g.Ctx.ReadJSON(&amp;game)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">40001</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"参数解析失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	game.ID = bson.ObjectIdHex(id)</span><br><span class="line">	<span class="keyword">return</span> g.Service.Save(game)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">Post</span><span class="params">()</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	game := datamodels.Game&#123;&#125;</span><br><span class="line">	err := g.Ctx.ReadJSON(&amp;game)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">40001</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"参数解析失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> g.Service.Save(game)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>route生成路由</p>
<p>route/route.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/kataras/iris"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/mvc"</span></span><br><span class="line">	<span class="string">"goms/controllers"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRoute</span><span class="params">(app *iris.Application)</span></span> &#123;</span><br><span class="line">	bathPath := <span class="string">"/api/v1"</span></span><br><span class="line">	mvc.New(app.Party(bathPath + <span class="string">"/games"</span>)).Handle(controllers.NewGameController())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>入口程序main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="comment">//"github.com/iris-contrib/middleware/cors"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/middleware/logger"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/middleware/recover"</span></span><br><span class="line">	<span class="string">"goms/route"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newApp</span><span class="params">()</span> *<span class="title">iris</span>.<span class="title">Application</span></span> &#123;</span><br><span class="line">	app := iris.New()</span><br><span class="line">	app.Use(<span class="built_in">recover</span>.New())</span><br><span class="line">	app.Use(logger.New())</span><br><span class="line">	app.AllowMethods(iris.MethodOptions)</span><br><span class="line">	<span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	app := newApp()</span><br><span class="line">	route.InitRoute(app)</span><br><span class="line">	app.Run(iris.Addr(<span class="string">":8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>go run跑起来~~</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>golang</tag>
        <tag>iris</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu wine 修改字体</title>
    <url>/2019/11/08/Ubuntu-wine-%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p>今天在Ubuntu安装WPS的时候，修复WPS的字体报错，从Windows复制了几个字体过来重新生成了一下缓存，突然WineQQ和微信的字体也变了，摸索了一下修改一发Wine字体：</p>
<a id="more"></a>

<p>每个wine程序都有自己的一套字体目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/home/wisp/.deepinwine/Deepin-QQLight/drive_c/windows/Fonts/</span><br><span class="line">/home/wisp/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/</span><br></pre></td></tr></table></figure>

<p>下载simsun.ttc 字体，放到各个程序的Fonts目录下面去，然后创建注册表：<br>zh.reg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;FixedSys&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helv&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helvetica&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Sans Serif&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;System&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tms Rmn&quot;=&quot;simsun&quot;</span><br></pre></td></tr></table></figure>

<p>导入zh.reg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINEPREFIX=&quot;/home/wisp/.deepinwine/Deepin-QQLight/&quot; deepin-wine  regedit zh.reg</span><br><span class="line">WINEPREFIX=&quot;/home/wisp/.deepinwine/Deepin-WeChat/&quot; deepin-wine  regedit zh.reg</span><br></pre></td></tr></table></figure>

<p>打开QQ，喵喵效果<br>搞完收工~</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Json序列化时时间处理</title>
    <url>/2019/11/06/Python-Json%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>在Python使用Json序列化字典的时候,如果遇到值是Datetime,Date格式的会报错,总不能手工一个个转,今天查了一下,可以使用dumps的default参数指定一个函数,loads的object_hook指定一个函数,解决这些转换问题</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">from datetime import datetime, date</span><br><span class="line"></span><br><span class="line">def json_dumps_default(obj):</span><br><span class="line">    if isinstance(obj, datetime):</span><br><span class="line">        return obj.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">    elif isinstance(obj, date):</span><br><span class="line">        return obj.strftime(&apos;%Y-%m-%d&apos;)</span><br><span class="line">    else:</span><br><span class="line">        return obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def json_loads_hook(dct):</span><br><span class="line">    for k, v in dct.items():</span><br><span class="line">        if k in [&quot;onlinedate&quot;, &quot;pre_onlinedate&quot;, &quot;mergedate&quot;]:</span><br><span class="line">            try:</span><br><span class="line">                dct[k] = datetime.strptime(v, &apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line">    return dct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    data = &#123;&quot;onlinedate&quot;: &quot;2019-11-15 16:30:36&quot;, &quot;name&quot;: &quot;wisp888&quot;&#125;</span><br><span class="line"></span><br><span class="line">    d1 = json.dumps(data)</span><br><span class="line">    print(d1)</span><br><span class="line"></span><br><span class="line">    d2 = json.loads(d1, object_hook=json_loads_hook)</span><br><span class="line">    print(d2)</span><br><span class="line"></span><br><span class="line">    d3 = json.dumps(d2, default=json_dumps_default)</span><br><span class="line">    print(d3)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;onlinedate&quot;: &quot;2019-11-15 16:30:36&quot;, &quot;name&quot;: &quot;wisp888&quot;&#125;</span><br><span class="line">&#123;&apos;onlinedate&apos;: datetime.datetime(2019, 11, 15, 16, 30, 36), &apos;name&apos;: &apos;wisp888&apos;&#125;</span><br><span class="line">&#123;&quot;onlinedate&quot;: &quot;2019-11-15 16:30:36&quot;, &quot;name&quot;: &quot;wisp888&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 数据备份与恢复</title>
    <url>/2019/11/05/mongodb%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h3 id="mongodump-备份数据库"><a href="#mongodump-备份数据库" class="headerlink" title="mongodump 备份数据库"></a>mongodump 备份数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径</span><br></pre></td></tr></table></figure>
<ul>
<li>不指定-d 则导出所有数据库</li>
</ul>
<a id="more"></a>

<h3 id="mongorestore还原数据库"><a href="#mongorestore还原数据库" class="headerlink" title="mongorestore还原数据库"></a>mongorestore还原数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 文件存在路径</span><br></pre></td></tr></table></figure>
<ul>
<li>–drop表示先删除所有记录，再导入备份</li>
</ul>
<h3 id="mongoexport-备份数据库指定表"><a href="#mongoexport-备份数据库指定表" class="headerlink" title="mongoexport 备份数据库指定表"></a>mongoexport 备份数据库指定表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段 -q 条件导出 --type=csv -o 文件名</span><br></pre></td></tr></table></figure>
<ul>
<li>-f 导出指定字段，以逗号分割</li>
<li>-q 查询语句</li>
<li>–type 默认为json</li>
</ul>
<h3 id="mongoimport-导入表，或者表中部分字段"><a href="#mongoimport-导入表，或者表中部分字段" class="headerlink" title="mongoimport 导入表，或者表中部分字段"></a>mongoimport 导入表，或者表中部分字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --type=csv --upsert --file 文件名</span><br></pre></td></tr></table></figure>
<ul>
<li>–upsert 插入或者更新现有数据</li>
<li>–type 指定备份文件的类型</li>
<li>–headline 表示不导入首行</li>
</ul>
<h3 id="举个粟子"><a href="#举个粟子" class="headerlink" title="举个粟子"></a>举个粟子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodump    -d oms -o ./oms.db</span><br><span class="line">mongorestore -d oms --drop oms/</span><br><span class="line">mongoexport  -d oms -c project_channel -o ./project_channel</span><br><span class="line">mongoimport  -d oms -c project_channel project_channel</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 部署flask + vue-element笔记</title>
    <url>/2019/10/31/Centos7%20%E9%83%A8%E7%BD%B2flask%20+%20vue-element%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h2><ul>
<li>/data/www/oms/server 后端</li>
<li>/data/www/oms/client  前端</li>
</ul>
<h2 id="部署vue前端"><a href="#部署vue前端" class="headerlink" title="部署vue前端"></a>部署vue前端</h2><h3 id="一、安装Nodejs"><a href="#一、安装Nodejs" class="headerlink" title="一、安装Nodejs"></a>一、安装Nodejs</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="二、编译vue"><a href="#二、编译vue" class="headerlink" title="二、编译vue"></a>二、编译vue</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /data/www/oms/client</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<h2 id="部署flask后端"><a href="#部署flask后端" class="headerlink" title="部署flask后端"></a>部署flask后端</h2><h3 id="一、安装配置virtualenv"><a href="#一、安装配置virtualenv" class="headerlink" title="一、安装配置virtualenv"></a>一、安装配置virtualenv</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /data/www/oms/server</span><br><span class="line">/usr/local/python3/bin/pip3 install virtualenv</span><br><span class="line">/usr/local/python3/bin/virtualenv --no-site-packages venv</span><br><span class="line">source venv/bin/activate    # 进入虚拟环境</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install Gunicorn</span><br><span class="line">deactivate    # 退出虚拟环境</span><br></pre></td></tr></table></figure>
<h3 id="二、安装配置supervistord"><a href="#二、安装配置supervistord" class="headerlink" title="二、安装配置supervistord"></a>二、安装配置supervistord</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/python3/bin/pip3 install supervisor</span><br><span class="line">/usr/local/python3/bin/echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>注意修改里面的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.ini</span><br></pre></td></tr></table></figure>
<p>添加flask进程/etc/supervisord.d/oms.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:oms-app]</span><br><span class="line">; 下面命令中的 app:app 请修改为你实际部署时的项目名称</span><br><span class="line">command=/data/www/oms/server/venv/bin/gunicorn -w 64 --bind=127.0.0.1:17173 manager:app --access-logfile logs/access.log --error-logfile logs/error.log</span><br><span class="line">;</span><br><span class="line">; ; 下面的路径请修改为你创建的项目的根目录</span><br><span class="line">directory=/data/www/oms/server</span><br><span class="line"></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">;</span><br><span class="line">; 下面的用户请修改为创建该项目的用户</span><br><span class="line">user=root</span><br><span class="line">;</span><br><span class="line">redirect_stderr=true</span><br><span class="line">;</span><br><span class="line">; log 文件的路径你可以重新自定义</span><br><span class="line">stdout_logfile=/data/www/oms/server/supervisor.log</span><br><span class="line"></span><br><span class="line">; 解决编码问题</span><br><span class="line">[supervisord]</span><br><span class="line">environment=LC_ALL=&apos;en_US.UTF-8&apos;,LANG=&apos;en_US.UTF-8&apos;</span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/python3/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">/usr/local/python3/bin/supervisorctl update</span><br><span class="line">/usr/local/python3/bin/supervisorctl status</span><br></pre></td></tr></table></figure>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  oms.lhp.com;</span><br><span class="line">        root  /data/www/oms/client/dist/;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        expires  30d;</span><br><span class="line"></span><br><span class="line">        location ~ /\.svn/     &#123;  return 403; &#125;</span><br><span class="line">        location ~* \.(sh|xls|doc|log|sh|sql|svn|tar|gz|svn-base) &#123;  root ~; deny all; &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /data/nginx_logs/oms_client.access.log;</span><br><span class="line">        error_log   /data/nginx_logs/oms_client.error.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 10002;</span><br><span class="line">        server_name _;</span><br><span class="line">        return 403;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen      10002;</span><br><span class="line">        server_name oms.lhp.com;</span><br><span class="line"></span><br><span class="line">        access_log  /data/nginx_logs/oms_server.access.log;</span><br><span class="line">        error_log   /data/nginx_logs/oms_server.error.log;</span><br><span class="line"></span><br><span class="line">        location /docs &#123;</span><br><span class="line">                allow 183.63.86.194;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        # flask中已设置跨域配置，Nginx不需要重复配置</span><br><span class="line">        proxy_hide_header &apos;Access-Control-Allow-Origin&apos;;</span><br><span class="line">        proxy_pass        http://127.0.0.1:17173;</span><br><span class="line">                proxy_http_version 1.1;</span><br><span class="line">                proxy_set_header   Host             $host;</span><br><span class="line">                proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>reload nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flask</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>vue</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 mongodb安装笔记</title>
    <url>/2019/10/31/Centos7%20mongodb%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="配置系统源"><a href="#配置系统源" class="headerlink" title="配置系统源"></a>配置系统源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/yum.repos.d/mongodb-org-4.2.repo</span><br><span class="line"></span><br><span class="line">[mongodb-org-4.2]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.2/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br><span class="line">systemctl start mongod.service</span><br></pre></td></tr></table></figure>

<h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123; user:&quot;root&quot;, pwd:&quot;123456&quot;, roles:[&quot;root&quot;] &#125;)</span><br><span class="line">use test</span><br><span class="line">db.createUser(&#123; user:&quot;admin&quot;, pwd:&quot;123456&quot;, roles:[&quot;dbOwner&quot;] &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件-etc-mongod-conf"><a href="#修改配置文件-etc-mongod-conf" class="headerlink" title="修改配置文件/etc/mongod.conf"></a>修改配置文件/etc/mongod.conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mongod.conf</span><br><span class="line"></span><br><span class="line"># for documentation of all options, see:</span><br><span class="line">#   http://docs.mongodb.org/manual/reference/configuration-options/</span><br><span class="line"></span><br><span class="line"># where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br><span class="line"></span><br><span class="line"># Where and how to store data.</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongo</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">#  engine:</span><br><span class="line">#  wiredTiger:</span><br><span class="line"></span><br><span class="line"># how the process runs</span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: &quot;enabled&quot;</span><br><span class="line"></span><br><span class="line">#operationProfiling:</span><br><span class="line"></span><br><span class="line">#replication:</span><br><span class="line"></span><br><span class="line">#sharding:</span><br><span class="line"></span><br><span class="line">## Enterprise-Only Options</span><br><span class="line"></span><br><span class="line">#auditLog:</span><br><span class="line"></span><br><span class="line">#snmp:</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
