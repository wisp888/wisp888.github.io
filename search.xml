<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用Curator清理Elasticsearch历史索引</title>
    <url>/%E5%88%A9%E7%94%A8Curator%E6%B8%85%E7%90%86Elasticsearch%E5%8E%86%E5%8F%B2%E7%B4%A2%E5%BC%95.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ubuntu 更换Python版本</title>
    <url>/ubuntu-%E6%9B%B4%E6%8D%A2Python%E7%89%88%E6%9C%AC.html</url>
    <content><![CDATA[<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/<span class="built_in">local</span>/bin/python3.7 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/pip3 pip3 /usr/<span class="built_in">local</span>/bin/pip3.7 1</span><br></pre></td></tr></table></figure>



<h3 id="切换之后终端打不开"><a href="#切换之后终端打不开" class="headerlink" title="切换之后终端打不开"></a>切换之后终端打不开</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/python3/dist-packages/gi/</span><br><span class="line">sudo cp _gi_cairo.cpython-36m-x86_64-linux-gnu.so _gi_cairo.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">sudo cp _gi.cpython-36m-x86_64-linux-gnu.so _gi.cpython-37m-x86_64-linux-gnu.so</span><br><span class="line">sudo cp -a /usr/lib/python3/dist-packages/gi  /usr/<span class="built_in">local</span>/lib/python3.7/site-packages/</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="update-alternatives-基本命令"><a href="#update-alternatives-基本命令" class="headerlink" title="update-alternatives 基本命令"></a>update-alternatives 基本命令</h3><p>update-alternatives命令的几个主要选项为：display、install、remove、config</p>
<h4 id="display选项"><a href="#display选项" class="headerlink" title="display选项"></a>display选项</h4><p>display选项用来显示一个命令链接的所有可选命令，即查看一个命令链接组的所有信息，包括链接的模式(自动还是手动)、链接priority值、所有可 用的链接命令等等。</p>
<h4 id="install选项"><a href="#install选项" class="headerlink" title="install选项"></a>install选项</h4><p>install选项的功能就是增加一组新的系统命令链接符。<br>使用语法为：update-alternatives –install <link> <name> <path> <priority> [–slave link name path]…。其中link为系统中功能相同软件的公共链接目录，比如/usr/bin/java(需绝对目录); name为命令链接符名称,如java；path为你所要使用新命令、新软件的所在目录；priority为优先级，当命令链接已存在时，需高于当前值，因为当alternative为自动模式时,系统默认启用priority高的链接；–slave为从alternative。</p>
<h4 id="config选项"><a href="#config选项" class="headerlink" title="config选项"></a>config选项</h4><p>config选项用来显示和修改实际指向的候选命令，为在现有的命令链接选择一个作为系统默认。</p>
<h4 id="remove选项"><a href="#remove选项" class="headerlink" title="remove选项"></a>remove选项</h4><p>remove选项的功能是删除一个命令的link值，其附带的slave也将一起删除。<br>使用语法为:update-alternatives –remove name path。其中name与path与install中的一致，如果所删除的链接组中还有其他链接的话，系统将会自动从其他中选择一个priority高的链接作为默认为链接。<br>比如：update-alternatives –remove java /usr/lib/jvm/jre1.6.0_20/bin/java</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>git proxy</title>
    <url>/git-proxy.html</url>
    <content><![CDATA[<h3 id="全局代理，写入配置"><a href="#全局代理，写入配置" class="headerlink" title="全局代理，写入配置"></a>全局代理，写入配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line">git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>



<h3 id="清除配置"><a href="#清除配置" class="headerlink" title="清除配置"></a>清除配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>



<h3 id="临时代理"><a href="#临时代理" class="headerlink" title="临时代理"></a>临时代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALL_PROXY=socks5://127.0.0.1:1080 git <span class="built_in">clone</span> xxx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 像Python3一样格式化字符串</title>
    <url>/golang-%E5%83%8FPython3%E4%B8%80%E6%A0%B7%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2.html</url>
    <content><![CDATA[<p>Python里面的字符串格式化，非常方便，像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"&#123;key&#125; 的值是：&#123;value&#125;"</span>.format(key=<span class="string">"test"</span>, value=<span class="string">"bbb"</span>))</span><br><span class="line">print(<span class="string">"&#123;test['a']&#125; xxoo &#123;test['b']&#125;"</span>.format(test=&#123;<span class="string">"a"</span>: <span class="number">123</span>, <span class="string">"b"</span>:<span class="number">456</span>&#125;))</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>然而Golang里面的字符串格式化好像就实现不了这种功能，但是我们可以用template来封装达到效果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板定义</span></span><br><span class="line">tepl := <span class="string">"&#123;&#123; .key &#125;&#125; 的值是：&#123;&#123; .value &#125;&#125; \n&#123;&#123; .test.a &#125;&#125; xxoo &#123;&#123; .test.b &#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析模板</span></span><br><span class="line">tmpl, err := template.New(<span class="string">"test"</span>).Parse(tepl)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据驱动模板</span></span><br><span class="line">data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">123</span>, <span class="string">"b"</span>:<span class="number">456</span>&#125;</span><br><span class="line">key := <span class="string">"test"</span></span><br><span class="line">value:=<span class="string">"bbb"</span></span><br><span class="line">err = tmpl.Execute(os.Stdout, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"key"</span>: key,</span><br><span class="line">    <span class="string">"value"</span>: value,</span><br><span class="line">    <span class="string">"test"</span>: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>貌似也能达到效果，下一步我把模板格式化后的结果存进变量：</p>
<p><code>tmpl.Execute</code>函数定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span> <span class="title">Execute</span><span class="params">(wr io.Writer, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> t.execute(wr, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个参数是输出地方，是一个<code>io.Writer</code> 。</p>
<p>看下标准库哪些库可以用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- os.File 同时实现了io.Reader和io.Writer</span><br><span class="line">- strings.Reader 实现了io.Reader</span><br><span class="line">- bufio.Reader/Writer 分别实现了io.Reader和io.Writer</span><br><span class="line">- bytes.Buffer 同时实现了io.Reader和io.Writer</span><br><span class="line">- bytes.Reader 实现了io.Reader</span><br><span class="line">- compress/gzip.Reader/Writer 分别实现了io.Reader和io.Writer</span><br><span class="line">- crypto/cipher.StreamReader/StreamWriter 分别实现了io.Reader和io.Writer</span><br><span class="line">- crypto/tls.Conn 同时实现了io.Reader和io.Writer</span><br><span class="line">- encoding/csv.Reader/Writer 分别实现了io.Reader和io.Writer</span><br><span class="line">- mime/multipart.Part 实现了io.Reader</span><br></pre></td></tr></table></figure>

<p>试试用bytes.Buffer：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cmd bytes.Buffer</span><br><span class="line">err = tmpl.Execute(&amp;cmd, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"key"</span>: key,</span><br><span class="line">    <span class="string">"value"</span>: value,</span><br><span class="line">    <span class="string">"test"</span>: data</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(cmd.String())</span><br></pre></td></tr></table></figure>

<p>阔以了</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>template</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 监控文件变化</title>
    <url>/golang-%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96.html</url>
    <content><![CDATA[<h2 id="下载我们需要的包"><a href="#下载我们需要的包" class="headerlink" title="下载我们需要的包"></a>下载我们需要的包</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/fsnotify/fsnotify</span><br></pre></td></tr></table></figure>



<h2 id="监控文件变化"><a href="#监控文件变化" class="headerlink" title="监控文件变化"></a>监控文件变化</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/fsnotify/fsnotify"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//创建一个监控对象</span></span><br><span class="line">    watch, err := fsnotify.NewWatcher();</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> watch.Close();</span><br><span class="line">    <span class="comment">//添加要监控的对象，文件或文件夹</span></span><br><span class="line">    err = watch.Add(<span class="string">"./tmp"</span>);</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//我们另启一个goroutine来处理监控对象的事件</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> ev := &lt;-watch.Events:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//判断事件发生的类型，如下5种</span></span><br><span class="line">                    <span class="comment">// Create 创建</span></span><br><span class="line">                    <span class="comment">// Write 写入</span></span><br><span class="line">                    <span class="comment">// Remove 删除</span></span><br><span class="line">                    <span class="comment">// Rename 重命名</span></span><br><span class="line">                    <span class="comment">// Chmod 修改权限</span></span><br><span class="line">                    <span class="keyword">if</span> ev.Op&amp;fsnotify.Create == fsnotify.Create &#123;</span><br><span class="line">                        log.Println(<span class="string">"创建文件 : "</span>, ev.Name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ev.Op&amp;fsnotify.Write == fsnotify.Write &#123;</span><br><span class="line">                        log.Println(<span class="string">"写入文件 : "</span>, ev.Name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ev.Op&amp;fsnotify.Remove == fsnotify.Remove &#123;</span><br><span class="line">                        log.Println(<span class="string">"删除文件 : "</span>, ev.Name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ev.Op&amp;fsnotify.Rename == fsnotify.Rename &#123;</span><br><span class="line">                        log.Println(<span class="string">"重命名文件 : "</span>, ev.Name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ev.Op&amp;fsnotify.Chmod == fsnotify.Chmod &#123;</span><br><span class="line">                        log.Println(<span class="string">"修改权限 : "</span>, ev.Name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> err := &lt;-watch.Errors:</span><br><span class="line">                &#123;</span><br><span class="line">                    log.Println(<span class="string">"error : "</span>, err);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//循环</span></span><br><span class="line">    <span class="keyword">select</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>覆盖文件会产生三次变化事件，如何处理？</li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang tar gzip 压缩和解压</title>
    <url>/golang-tar-gzip-%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B.html</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"archive/tar"</span></span><br><span class="line">	<span class="string">"compress/gzip"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩 使用gzip压缩成tar.gz</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Compress</span><span class="params">(files []*os.File, dest <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	d, _ := os.Create(dest)</span><br><span class="line">	<span class="keyword">defer</span> d.Close()</span><br><span class="line">	gw := gzip.NewWriter(d)</span><br><span class="line">	<span class="keyword">defer</span> gw.Close()</span><br><span class="line">	tw := tar.NewWriter(gw)</span><br><span class="line">	<span class="keyword">defer</span> tw.Close()</span><br><span class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">		err := compress(file, <span class="string">""</span>, tw)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compress</span><span class="params">(file *os.File, prefix <span class="keyword">string</span>, tw *tar.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	info, err := file.Stat()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> info.IsDir() &#123;</span><br><span class="line">		prefix = prefix + <span class="string">"/"</span> + info.Name()</span><br><span class="line">		fileInfos, err := file.Readdir(<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> _, fi := <span class="keyword">range</span> fileInfos &#123;</span><br><span class="line">			f, err := os.Open(file.Name() + <span class="string">"/"</span> + fi.Name())</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">			err = compress(f, prefix, tw)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		header, err := tar.FileInfoHeader(info, <span class="string">""</span>)</span><br><span class="line">		header.Name = prefix + <span class="string">"/"</span> + header.Name</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		err = tw.WriteHeader(header)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		_, err = io.Copy(tw, file)</span><br><span class="line">		file.Close()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解压 tar.gz</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeCompress</span><span class="params">(tarFile, dest <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	srcFile, err := os.Open(tarFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> srcFile.Close()</span><br><span class="line">	gr, err := gzip.NewReader(srcFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> gr.Close()</span><br><span class="line">	tr := tar.NewReader(gr)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		hdr, err := tr.Next()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		filename := dest + hdr.Name</span><br><span class="line">		file, err := createFile(filename)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		io.Copy(file, tr)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(*os.File, error)</span></span> &#123;</span><br><span class="line">	err := os.MkdirAll(<span class="keyword">string</span>([]<span class="keyword">rune</span>(name)[<span class="number">0</span>:strings.LastIndex(name, <span class="string">"/"</span>)]), <span class="number">0755</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> os.Create(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>tar</tag>
        <tag>gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 计算Md5</title>
    <url>/golang-%E8%AE%A1%E7%AE%97Md5.html</url>
    <content><![CDATA[<p>MD5的所需要的包在”crypto/md5”包中，需要先实例化一个MD5对象，然后在此基础上调用sum方法即可。</p>
<h3 id="计算文件MD5"><a href="#计算文件MD5" class="headerlink" title="计算文件MD5"></a>计算文件MD5</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">md5 := md5.New()</span><br><span class="line">io.Copy(md5,file)</span><br><span class="line">MD5Str := hex.EncodeToString(md5.Sum(<span class="literal">nil</span>))</span><br></pre></td></tr></table></figure>



<h3 id="计算字符串MD5"><a href="#计算字符串MD5" class="headerlink" title="计算字符串MD5"></a>计算字符串MD5</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">md5 := md5.New()</span><br><span class="line">md5.Write([]<span class="keyword">byte</span>(<span class="string">"hello,world!"</span>))</span><br><span class="line">MD5Str := hex.EncodeToString(md5.Sum(<span class="literal">nil</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang iris 学习五: zap日志</title>
    <url>/golang-iris-%E5%AD%A6%E4%B9%A0%E4%BA%94-zap%E6%97%A5%E5%BF%97.html</url>
    <content><![CDATA[<p>之前试用了一下<code>logrus</code>发现并不是很适合，今天来试用一下排行榜第2位的zap：</p>
<p>这波我们用Zap实现以下功能</p>
<ol>
<li>将Error级别以下的信息写入Info文件</li>
<li>将Error级别以上的信息写入Error文件</li>
<li>日志按天分割</li>
<li>屏幕输出日志 </li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go get -u go.uber.org/zap</span><br></pre></td></tr></table></figure>



<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>Zap提供了两种类型的日志记录器—<code>Sugared Logger</code>和<code>Logger</code>。</p>
<p>在性能很好但不是很关键的上下文中，使用<code>SugaredLogger</code>。它比其他结构化日志记录包快4-10倍，并且支持结构化和printf风格的日志记录。</p>
<p>在每一微秒和每一次内存分配都很重要的上下文中，使用<code>Logger</code>。它甚至比<code>SugaredLogger</code>更快，内存分配次数也更少，但它只支持强类型的结构化日志记录。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zaplog *zap.SugaredLogger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	InitLogger()</span><br><span class="line">	<span class="keyword">defer</span> zaplog.Sync()</span><br><span class="line">	zaplog.Infof(<span class="string">"这是一条Info日志！"</span>)</span><br><span class="line">	zaplog.Errorf(<span class="string">"这是一条Error日志！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	logger, _ := zap.NewProduction()</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用<code>zap.NewProduction()</code>/<code>zap.NewDevelopment()</code>或者<code>zap.Example()</code>创建一个Logger。</li>
<li>调用主logger的<code>. Sugar()</code>方法来获取一个<code>SugaredLogger</code>。</li>
</ul>
<h2 id="开始定制"><a href="#开始定制" class="headerlink" title="开始定制"></a>开始定制</h2><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zaplog *zap.SugaredLogger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	InitLogger()</span><br><span class="line">	<span class="keyword">defer</span> zaplog.Sync()</span><br><span class="line">	zaplog.Infof(<span class="string">"这是一条Info日志！"</span>)</span><br><span class="line">	zaplog.Errorf(<span class="string">"这是一条Error日志！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fileWriter := getLogWriter()</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	core := zapcore.NewCore(encoder, zapcore.AddSync(fileWriter), zapcore.DebugLevel)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core)</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span> <span class="title">zapcore</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">()</span> <span class="title">io</span>.<span class="title">Writer</span></span> &#123;</span><br><span class="line">	file, _ := os.Create(<span class="string">"./test.log"</span>)</span><br><span class="line">	<span class="keyword">return</span> file</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Encoder</strong>:编码器(如何写入日志)。我们将使用开箱即用的<code>NewJSONEncoder()</code>，并使用预先设置的<code>ProductionEncoderConfig()</code>。</li>
<li><strong>WriterSyncer</strong> ：指定日志将写到哪里去。我们使用<code>zapcore.AddSync()</code>函数并且将打开的文件句柄传进去。</li>
<li><strong>Log Level</strong>：哪种级别的日志将被写入。</li>
</ul>
<h3 id="将Json格式改为普通文本"><a href="#将Json格式改为普通文本" class="headerlink" title="将Json格式改为普通文本"></a>将Json格式改为普通文本</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span> <span class="title">zapcore</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(zap.NewProductionEncoderConfig())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="修改时间格式并把级别字段添加颜色"><a href="#修改时间格式并把级别字段添加颜色" class="headerlink" title="修改时间格式并把级别字段添加颜色"></a>修改时间格式并把级别字段添加颜色</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span> <span class="title">zapcore</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="自定义时间格式"><a href="#自定义时间格式" class="headerlink" title="自定义时间格式"></a>自定义时间格式</h3><p>使用<code>zapcore.ISO8601TimeEncoder</code>格式，还是不是很友好，我想自定义一下，先看看<code>zapcore.ISO8601TimeEncoder</code>这个函数定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ISO8601TimeEncoder</span><span class="params">(t time.Time, enc PrimitiveArrayEncoder)</span></span> &#123;</span><br><span class="line">	enc.AppendString(t.Format(<span class="string">"2006-01-02T15:04:05.000Z0700"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>噢，很简单，我来抄一个</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">customTimeEncoder</span><span class="params">(t time.Time, enc zapcore.PrimitiveArrayEncoder)</span></span> &#123;</span><br><span class="line">	enc.AppendString(t.Format(<span class="string">"[2006-01-02 15:04:05]"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span> <span class="title">zapcore</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = customTimeEncoder</span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="添加调用者信息"><a href="#添加调用者信息" class="headerlink" title="添加调用者信息"></a>添加调用者信息</h3><p>添加打印位置，方便调试</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fileWriter := getLogWriter()</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	core := zapcore.NewCore(encoder, zapcore.AddSync(fileWriter), zapcore.DebugLevel)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h3><p>zap本身不带这个功能，我们需要另外的库：</p>
<ul>
<li><a href="https://github.com/natefinch/lumberjack" target="_blank" rel="noopener">Lumberjack</a>  ：按大小切割</li>
<li><a href="https://github.com/lestrrat-go/file-rotatelogs" target="_blank" rel="noopener">file-rotatelogs</a>  ：按天切割</li>
</ul>
<p>我们使用<code>file-rotatelogs</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fileWriter := getLogWriter(<span class="string">"./"</span>, <span class="string">"test"</span>, <span class="number">7</span>)</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	core := zapcore.NewCore(encoder, zapcore.AddSync(fileWriter), zapcore.DebugLevel)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">(logPath, level <span class="keyword">string</span>, save <span class="keyword">uint</span>)</span> <span class="title">io</span>.<span class="title">Writer</span></span> &#123;</span><br><span class="line">	logFullPath := path.Join(logPath, level)</span><br><span class="line">	hook, err := rotatelogs.New(</span><br><span class="line">		logFullPath+<span class="string">".%Y%m%d%H"</span>,                   <span class="comment">// 没有使用go风格反人类的format格式</span></span><br><span class="line">		rotatelogs.WithLinkName(logFullPath),      <span class="comment">// 生成软链，指向最新日志文件</span></span><br><span class="line">		rotatelogs.WithRotationCount(save),        <span class="comment">// 文件最大保存份数</span></span><br><span class="line">		rotatelogs.WithRotationTime(<span class="number">24</span>*time.Hour), <span class="comment">// 日志切割时间间隔</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> hook</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="按级别分文件打印"><a href="#按级别分文件打印" class="headerlink" title="按级别分文件打印"></a>按级别分文件打印</h3><ul>
<li>使用<code>zapcore.NewTee</code>初始化多个<code>zapcore.NewCore</code></li>
<li>使用<code>zap.LevelEnablerFunc</code>过滤写入条件</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line"></span><br><span class="line">	infoWrite := getLogWriter(<span class="string">"./"</span>, <span class="string">"info"</span>, <span class="number">7</span>)</span><br><span class="line">	errorWrite := getLogWriter(<span class="string">"./"</span>, <span class="string">"error"</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">	infoLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &lt; zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line">	warnLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &gt;= zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	core := zapcore.NewTee(</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(infoWrite), infoLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(errorWrite), warnLevel),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="增加屏幕输出"><a href="#增加屏幕输出" class="headerlink" title="增加屏幕输出"></a>增加屏幕输出</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line"></span><br><span class="line">	infoWrite := getLogWriter(<span class="string">"./"</span>, <span class="string">"info"</span>, <span class="number">7</span>)</span><br><span class="line">	errorWrite := getLogWriter(<span class="string">"./"</span>, <span class="string">"error"</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">	infoLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &lt; zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line">	warnLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &gt;= zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	core := zapcore.NewTee(</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(os.Stdout), zapcore.DebugLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(infoWrite), infoLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(errorWrite), warnLevel),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="完整测试代码"><a href="#完整测试代码" class="headerlink" title="完整测试代码"></a>完整测试代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> zaplog *zap.SugaredLogger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	InitLogger()</span><br><span class="line">	<span class="keyword">defer</span> zaplog.Sync()</span><br><span class="line">	zaplog.Infof(<span class="string">"这是一条Info日志！"</span>)</span><br><span class="line">	zaplog.Errorf(<span class="string">"这是一条Error日志！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line"></span><br><span class="line">	infoWrite := getLogWriter(<span class="string">"./"</span>, <span class="string">"info"</span>, <span class="number">7</span>)</span><br><span class="line">	errorWrite := getLogWriter(<span class="string">"./"</span>, <span class="string">"error"</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">	infoLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &lt; zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line">	warnLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &gt;= zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	core := zapcore.NewTee(</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(os.Stdout), zapcore.DebugLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(infoWrite), infoLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(errorWrite), warnLevel),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line">	zaplog = logger.Sugar()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">customTimeEncoder</span><span class="params">(t time.Time, enc zapcore.PrimitiveArrayEncoder)</span></span> &#123;</span><br><span class="line">	enc.AppendString(t.Format(<span class="string">"[2006-01-02 15:04:05]"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span> <span class="title">zapcore</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = customTimeEncoder</span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">(logPath, level <span class="keyword">string</span>, save <span class="keyword">uint</span>)</span> <span class="title">io</span>.<span class="title">Writer</span></span> &#123;</span><br><span class="line">	logFullPath := path.Join(logPath, level)</span><br><span class="line">	hook, err := rotatelogs.New(</span><br><span class="line">		logFullPath+<span class="string">".%Y%m%d%H"</span>,                   <span class="comment">// 没有使用go风格反人类的format格式</span></span><br><span class="line">		rotatelogs.WithLinkName(logFullPath),      <span class="comment">// 生成软链，指向最新日志文件</span></span><br><span class="line">		rotatelogs.WithRotationCount(save),        <span class="comment">// 文件最大保存份数</span></span><br><span class="line">		rotatelogs.WithRotationTime(<span class="number">24</span>*time.Hour), <span class="comment">// 日志切割时间间隔</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> hook</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="结合Iris"><a href="#结合Iris" class="headerlink" title="结合Iris"></a>结合Iris</h2><h3 id="先初始化一个Logger出来"><a href="#先初始化一个Logger出来" class="headerlink" title="先初始化一个Logger出来"></a>先初始化一个Logger出来</h3><p><code>config/config.go</code> 定义一个log配置的结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Level <span class="keyword">string</span> <span class="string">`yaml:"level"`</span></span><br><span class="line">	Path  <span class="keyword">string</span> <span class="string">`yaml:"path"`</span></span><br><span class="line">	Save  <span class="keyword">uint</span>   <span class="string">`yaml:"save"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>config/logger.go` 根据配置的日志级别，日志路径，日志保留天数初始化一个Logger</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	rotatelogs <span class="string">"github.com/lestrrat-go/file-rotatelogs"</span></span><br><span class="line">	<span class="string">"go.uber.org/zap"</span></span><br><span class="line">	<span class="string">"go.uber.org/zap/zapcore"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"path"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Log *zap.SugaredLogger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitLogger</span><span class="params">(logConfig LogConfig)</span></span> &#123;</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line"></span><br><span class="line">	infoLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &lt; zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line">	infoWriter := getLogWriter(logConfig.Path, <span class="string">"Info"</span>, logConfig.Save)</span><br><span class="line"></span><br><span class="line">	errorLevel := zap.LevelEnablerFunc(<span class="function"><span class="keyword">func</span><span class="params">(lvl zapcore.Level)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> lvl &gt;= zapcore.ErrorLevel</span><br><span class="line">	&#125;)</span><br><span class="line">	errorWriter := getLogWriter(logConfig.Path, <span class="string">"Error"</span>, logConfig.Save)</span><br><span class="line"></span><br><span class="line">	core := zapcore.NewTee(</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(os.Stdout), zap.DebugLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(infoWriter), infoLevel),</span><br><span class="line">		zapcore.NewCore(encoder, zapcore.AddSync(errorWriter), errorLevel),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	logger := zap.New(core, zap.AddCaller())</span><br><span class="line">	Log = logger.Sugar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">customTimeEncoder</span><span class="params">(t time.Time, enc zapcore.PrimitiveArrayEncoder)</span></span> &#123;</span><br><span class="line">	enc.AppendString(t.Format(<span class="string">"[2006-01-02 15:04:05]"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span> <span class="title">zapcore</span>.<span class="title">Encoder</span></span> &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = customTimeEncoder</span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">(logPath, level <span class="keyword">string</span>, save <span class="keyword">uint</span>)</span> <span class="title">io</span>.<span class="title">Writer</span></span> &#123;</span><br><span class="line">	logFullPath := path.Join(logPath, level)</span><br><span class="line">	hook, err := rotatelogs.New(</span><br><span class="line">		logFullPath+<span class="string">".%Y%m%d%H"</span>,                   <span class="comment">// 没有使用go风格反人类的format格式</span></span><br><span class="line">		rotatelogs.WithLinkName(logFullPath),      <span class="comment">// 生成软链，指向最新日志文件</span></span><br><span class="line">		rotatelogs.WithRotationCount(save),        <span class="comment">// 文件最大保存份数</span></span><br><span class="line">		rotatelogs.WithRotationTime(<span class="number">24</span>*time.Hour), <span class="comment">// 日志切割时间间隔</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> hook</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="再撸一个中间件打印请求记录middleware-logger-middleware-go"><a href="#再撸一个中间件打印请求记录middleware-logger-middleware-go" class="headerlink" title="再撸一个中间件打印请求记录middleware/logger_middleware.go"></a>再撸一个中间件打印请求记录<code>middleware/logger_middleware.go</code></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"bytes"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12"</span></span><br><span class="line">	<span class="string">"goms/config"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"path"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoggerHandler</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">	p := ctx.Request().URL.Path</span><br><span class="line">	method := ctx.Request().Method</span><br><span class="line">	start := time.Now()</span><br><span class="line">	fields := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	fields[<span class="string">"title"</span>] = <span class="string">"访问日志"</span></span><br><span class="line">	fields[<span class="string">"fun_name"</span>] = path.Join(method, p)</span><br><span class="line">	fields[<span class="string">"ip"</span>] = ctx.Request().RemoteAddr</span><br><span class="line">	fields[<span class="string">"method"</span>] = method</span><br><span class="line">	fields[<span class="string">"url"</span>] = ctx.Request().URL.String()</span><br><span class="line">	fields[<span class="string">"proto"</span>] = ctx.Request().Proto</span><br><span class="line">	<span class="comment">//fields["header"] = ctx.Request().Header</span></span><br><span class="line">	fields[<span class="string">"user_agent"</span>] = ctx.Request().UserAgent()</span><br><span class="line">	fields[<span class="string">"x_request_id"</span>] = ctx.GetHeader(<span class="string">"X-Request-Id"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果是POST/PUT请求，并且内容类型为JSON，则读取内容体</span></span><br><span class="line">	<span class="keyword">if</span> method == http.MethodPost || method == http.MethodPut || method == http.MethodPatch &#123;</span><br><span class="line">		body, err := ioutil.ReadAll(ctx.Request().Body)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> ctx.Request().Body.Close()</span><br><span class="line">			buf := bytes.NewBuffer(body)</span><br><span class="line">			ctx.Request().Body = ioutil.NopCloser(buf)</span><br><span class="line">			fields[<span class="string">"content_length"</span>] = ctx.GetContentLength()</span><br><span class="line">			fields[<span class="string">"body"</span>] = <span class="keyword">string</span>(body)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ctx.Next()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//下面是返回日志</span></span><br><span class="line">	fields[<span class="string">"res_status"</span>] = ctx.ResponseWriter().StatusCode()</span><br><span class="line">	<span class="keyword">if</span> ctx.Values().GetString(<span class="string">"out_err"</span>) != <span class="string">""</span> &#123;</span><br><span class="line">		fields[<span class="string">"out_err"</span>] = ctx.Values().GetString(<span class="string">"out_err"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fields[<span class="string">"res_length"</span>] = ctx.ResponseWriter().Header().Get(<span class="string">"size"</span>)</span><br><span class="line">	<span class="keyword">if</span> v := ctx.Values().Get(<span class="string">"res_body"</span>); v != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> b, ok := v.([]<span class="keyword">byte</span>); ok &#123;</span><br><span class="line">			fields[<span class="string">"res_body"</span>] = <span class="keyword">string</span>(b)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	token := ctx.Values().Get(<span class="string">"jwt"</span>)</span><br><span class="line">	<span class="keyword">if</span> token != <span class="literal">nil</span> &#123;</span><br><span class="line">		fields[<span class="string">"uid"</span>] = token.(*jwt.Token).Claims</span><br><span class="line">	&#125;</span><br><span class="line">	timeConsuming := time.Since(start).Nanoseconds() / <span class="number">1e6</span></span><br><span class="line">	msg := fmt.Sprintf(<span class="string">"[http] %s-%s-%s-%d(%dms)"</span>,</span><br><span class="line">		p, ctx.Request().Method, ctx.Request().RemoteAddr, ctx.ResponseWriter().StatusCode(), timeConsuming)</span><br><span class="line">	config.Log.Debug(fields)</span><br><span class="line">	config.Log.Infof(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="加进路由route-route-go"><a href="#加进路由route-route-go" class="headerlink" title="加进路由route/route.go"></a>加进路由<code>route/route.go</code></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12/mvc"</span></span><br><span class="line">	<span class="string">"goms/controllers"</span></span><br><span class="line">	<span class="string">"goms/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRoute</span><span class="params">(app *iris.Application)</span></span> &#123;</span><br><span class="line">	app.Use(middleware.LoggerHandler)</span><br><span class="line"></span><br><span class="line">	mvc.Configure(app.Party(<span class="string">"/account"</span>), <span class="function"><span class="keyword">func</span><span class="params">(m *mvc.Application)</span></span> &#123;</span><br><span class="line">		m.Handle(controllers.NewLoginController())</span><br><span class="line">	&#125;)</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>好了，就用这个Zap吧</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>iris</tag>
        <tag>log</tag>
        <tag>zap</tag>
      </tags>
  </entry>
  <entry>
    <title>golang iris 学习四: logrus日志</title>
    <url>/golang-iris-%E5%AD%A6%E4%B9%A0%E5%9B%9B-log%E6%97%A5%E5%BF%97.html</url>
    <content><![CDATA[<h3 id="logrus特性"><a href="#logrus特性" class="headerlink" title="logrus特性"></a>logrus特性</h3><ul>
<li><p>完全兼容golang标准库日志模块：logrus拥有六种日志级别：debug、info、warn、error、fatal和panic，这是golang标准库日志模块的API的超集。如果您的项目使用标准库日志模块，完全可以以最低的代价迁移到logrus上。</p>
</li>
<li><p>可扩展的Hook机制：允许使用者通过hook的方式将日志分发到任意地方，如本地文件系统、标准输出、logstash、elasticsearch或者mq等，或者通过hook定义日志内容和格式等。</p>
</li>
<li><p>可选的日志输出格式：logrus内置了两种日志格式，<code>JSONFormatter</code>和<code>TextFormatter</code>，如果这两个格式不满足需求，可以自己动手实现接口<code>Formatter</code>，来定义自己的日志格式。</p>
</li>
<li><p>Field机制：logrus鼓励通过Field机制进行精细化的、结构化的日志记录，而不是通过冗长的消息来记录日志。</p>
</li>
<li><p>logrus是一个可插拔的、结构化的日志框架。</p>
</li>
</ul>
<h3 id="logrus使用"><a href="#logrus使用" class="headerlink" title="logrus使用"></a>logrus使用</h3><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  log.WithFields(log.Fields&#123;</span><br><span class="line">    <span class="string">"animal"</span>: <span class="string">"walrus"</span>,</span><br><span class="line">  &#125;).Info(<span class="string">"A walrus appears"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time=&quot;2018-08-11T15:42:22+08:00&quot; level=info msg=&quot;A walrus appears&quot; animal=walrus</span><br></pre></td></tr></table></figure>

<h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 设置日志格式为json格式</span></span><br><span class="line">    log.SetFormatter(&amp;log.JSONFormatter&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置将日志输出到标准输出（默认的输出为stderr，标准错误）</span></span><br><span class="line">    <span class="comment">// 日志消息输出可以是任意的io.writer类型</span></span><br><span class="line">    log.SetOutput(os.Stdout)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置日志级别为warn以上</span></span><br><span class="line">    log.SetLevel(log.WarnLevel)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.WithFields(log.Fields&#123;</span><br><span class="line">        <span class="string">"animal"</span>: <span class="string">"walrus"</span>,</span><br><span class="line">        <span class="string">"size"</span>:   <span class="number">10</span>,</span><br><span class="line">    &#125;).Info(<span class="string">"A group of walrus emerges from the ocean"</span>)</span><br><span class="line"></span><br><span class="line">    log.WithFields(log.Fields&#123;</span><br><span class="line">        <span class="string">"omg"</span>:    <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"number"</span>: <span class="number">122</span>,</span><br><span class="line">    &#125;).Warn(<span class="string">"The group's number increased tremendously!"</span>)</span><br><span class="line"></span><br><span class="line">    log.WithFields(log.Fields&#123;</span><br><span class="line">        <span class="string">"omg"</span>:    <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"number"</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;).Fatal(<span class="string">"The ice breaks!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h4><p>logger是一种相对高级的用法, 对于一个大型项目, 往往需要一个全局的logrus实例，即<code>logger</code>对象来记录项目所有的日志。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// logrus提供了New()函数来创建一个logrus的实例。</span></span><br><span class="line"><span class="comment">// 项目中，可以创建任意数量的logrus实例。</span></span><br><span class="line"><span class="keyword">var</span> log = logrus.New()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 为当前logrus实例设置消息的输出，同样地，</span></span><br><span class="line">    <span class="comment">// 可以设置logrus实例的输出到任意io.writer</span></span><br><span class="line">    log.Out = os.Stdout</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为当前logrus实例设置消息输出格式为json格式。</span></span><br><span class="line">    <span class="comment">// 同样地，也可以单独为某个logrus实例设置日志级别和hook，这里不详细叙述。</span></span><br><span class="line">    log.Formatter = &amp;logrus.JSONFormatter&#123;&#125;</span><br><span class="line"></span><br><span class="line">    log.WithFields(logrus.Fields&#123;</span><br><span class="line">        <span class="string">"animal"</span>: <span class="string">"walrus"</span>,</span><br><span class="line">        <span class="string">"size"</span>:   <span class="number">10</span>,</span><br><span class="line">    &#125;).Info(<span class="string">"A group of walrus emerges from the ocean"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h4><p>logrus不推荐使用冗长的消息来记录运行信息，它推荐使用<code>Fields</code>来进行精细化的、结构化的信息记录。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line">  <span class="string">"event"</span>: event,</span><br><span class="line">  <span class="string">"topic"</span>: topic,</span><br><span class="line">  <span class="string">"key"</span>: key,</span><br><span class="line">&#125;).Fatal(<span class="string">"Failed to send event"</span>)</span><br></pre></td></tr></table></figure>

<p>前面的<code>WithFields</code> API可以规范使用者按照其提倡的方式记录日志。但是<code>WithFields</code>依然是可选的，因为某些场景下，使用者确实只需要记录仪一条简单的消息。</p>
<p>通常，在一个应用中、或者应用的一部分中，都有一些固定的<code>Field</code>。比如在处理用户http请求时，上下文中，所有的日志都会有<code>request_id</code>和<code>user_ip</code>。为了避免每次记录日志都要使用<code>log.WithFields(log.Fields{&quot;request_id&quot;: request_id, &quot;user_ip&quot;: user_ip})</code>，我们可以创建一个<code>logrus.Entry</code>实例，为这个实例设置默认<code>Fields</code>，在上下文中使用这个<code>logrus.Entry</code>实例记录日志即可。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">requestLogger := log.WithFields(log.Fields&#123;<span class="string">"request_id"</span>: request_id, <span class="string">"user_ip"</span>: user_ip&#125;)</span><br><span class="line">requestLogger.Info(<span class="string">"something happened on that request"</span>) # will log request_id and user_ip</span><br><span class="line">requestLogger.Warn(<span class="string">"something not great happened"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="日志本地文件分割"><a href="#日志本地文件分割" class="headerlink" title="日志本地文件分割"></a>日志本地文件分割</h4><p>logrus本身不带日志本地文件分割功能，但是我们可以通过<code>file-rotatelogs</code>进行日志本地文件分割。 每次当我们写入日志的时候，logrus都会调用<code>file-rotatelogs</code>来判断日志是否要进行切分。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/lestrrat-go/file-rotatelogs"</span></span><br><span class="line">    <span class="string">"github.com/rifflock/lfshook"</span></span><br><span class="line">    log <span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newLfsHook</span><span class="params">(logLevel *<span class="keyword">string</span>, maxRemainCnt <span class="keyword">uint</span>)</span> <span class="title">log</span>.<span class="title">Hook</span></span> &#123;</span><br><span class="line">    writer, err := rotatelogs.New(</span><br><span class="line">        logName+<span class="string">".%Y%m%d%H"</span>,</span><br><span class="line">        <span class="comment">// WithLinkName为最新的日志建立软连接，以方便随着找到当前日志文件</span></span><br><span class="line">        rotatelogs.WithLinkName(logName),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// WithRotationTime设置日志分割的时间，这里设置为一小时分割一次</span></span><br><span class="line">        rotatelogs.WithRotationTime(time.Hour),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// WithMaxAge和WithRotationCount二者只能设置一个，</span></span><br><span class="line">        <span class="comment">// WithMaxAge设置文件清理前的最长保存时间，</span></span><br><span class="line">        <span class="comment">// WithRotationCount设置文件清理前最多保存的个数。</span></span><br><span class="line">        <span class="comment">//rotatelogs.WithMaxAge(time.Hour*24),</span></span><br><span class="line">        rotatelogs.WithRotationCount(maxRemainCnt),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Errorf(<span class="string">"config local file system for logger error: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    level, ok := logLevels[*logLevel]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        log.SetLevel(level)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.SetLevel(log.WarnLevel)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lfsHook := lfshook.NewHook(lfshook.WriterMap&#123;</span><br><span class="line">        log.DebugLevel: writer,</span><br><span class="line">        log.InfoLevel:  writer,</span><br><span class="line">        log.WarnLevel:  writer,</span><br><span class="line">        log.ErrorLevel: writer,</span><br><span class="line">        log.FatalLevel: writer,</span><br><span class="line">        log.PanicLevel: writer,</span><br><span class="line">    &#125;, &amp;log.TextFormatter&#123;DisableColors: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lfsHook</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结合IRIS使用"><a href="#结合IRIS使用" class="headerlink" title="结合IRIS使用"></a>结合IRIS使用</h3><p>先初始化一个Logger出来</p>
<p><code>config/config.go</code> 定义一个log配置的结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Level <span class="keyword">string</span> <span class="string">`yaml:"level"`</span></span><br><span class="line">	Path  <span class="keyword">string</span> <span class="string">`yaml:"path"`</span></span><br><span class="line">	Save  <span class="keyword">uint</span>   <span class="string">`yaml:"save"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>config/logger.go` 根据配置的日志级别，日志路径，日志保留天数初始化一个Logger</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/lestrrat-go/file-rotatelogs"</span></span><br><span class="line">	<span class="string">"github.com/rifflock/lfshook"</span></span><br><span class="line">	<span class="string">"github.com/sirupsen/logrus"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"path"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Log = logrus.New()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLog</span><span class="params">(logConfig LogConfig)</span></span> &#123;</span><br><span class="line">	Log.Out = os.Stdout</span><br><span class="line">	<span class="keyword">var</span> loglevel logrus.Level</span><br><span class="line">	err := loglevel.UnmarshalText([]<span class="keyword">byte</span>(logConfig.Level))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		Log.Panicf(<span class="string">"设置log级别失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	Log.SetLevel(loglevel)</span><br><span class="line">	Log.Formatter = &amp;logrus.TextFormatter&#123;&#125;</span><br><span class="line">	LocalFilesystemLogger(Log, logConfig.Path, logConfig.Save)</span><br><span class="line">	<span class="comment">//Log.ReportCaller = true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logWriter</span><span class="params">(logPath <span class="keyword">string</span>, level <span class="keyword">string</span>, save <span class="keyword">uint</span>)</span> *<span class="title">rotatelogs</span>.<span class="title">RotateLogs</span></span> &#123;</span><br><span class="line">	logFullPath := path.Join(logPath, level)</span><br><span class="line">	logwriter, err := rotatelogs.New(</span><br><span class="line">		logFullPath+<span class="string">".%Y%m%d"</span>,</span><br><span class="line">		rotatelogs.WithLinkName(logFullPath),      <span class="comment">// 生成软链，指向最新日志文件</span></span><br><span class="line">		rotatelogs.WithRotationCount(save),        <span class="comment">// 文件最大保存份数</span></span><br><span class="line">		rotatelogs.WithRotationTime(<span class="number">24</span>*time.Hour), <span class="comment">// 日志切割时间间隔</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> logwriter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LocalFilesystemLogger</span><span class="params">(log *logrus.Logger, logPath <span class="keyword">string</span>, save <span class="keyword">uint</span>)</span></span> &#123;</span><br><span class="line">	lfHook := lfshook.NewHook(lfshook.WriterMap&#123;</span><br><span class="line">		logrus.DebugLevel: logWriter(logPath, <span class="string">"debug"</span>, save), <span class="comment">// 为不同级别设置不同的输出目的</span></span><br><span class="line">		logrus.InfoLevel:  logWriter(logPath, <span class="string">"info"</span>, save),</span><br><span class="line">		logrus.WarnLevel:  logWriter(logPath, <span class="string">"warn"</span>, save),</span><br><span class="line">		logrus.ErrorLevel: logWriter(logPath, <span class="string">"error"</span>, save),</span><br><span class="line">		logrus.FatalLevel: logWriter(logPath, <span class="string">"fatal"</span>, save),</span><br><span class="line">		logrus.PanicLevel: logWriter(logPath, <span class="string">"panic"</span>, save),</span><br><span class="line">	&#125;, &amp;logrus.JSONFormatter&#123;&#125;)</span><br><span class="line">	log.AddHook(lfHook)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>再撸一个中间件打印请求记录<code>middleware/logger_middleware.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"bytes"</span></span><br><span class="line">	<span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12"</span></span><br><span class="line">	<span class="string">"goms/config"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"path"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoggerHandler</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">	p := ctx.Request().URL.Path</span><br><span class="line">	method := ctx.Request().Method</span><br><span class="line">	start := time.Now()</span><br><span class="line">	fields := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	fields[<span class="string">"title"</span>] = <span class="string">"访问日志"</span></span><br><span class="line">	fields[<span class="string">"fun_name"</span>] = path.Join(method, p)</span><br><span class="line">	fields[<span class="string">"ip"</span>] = ctx.Request().RemoteAddr</span><br><span class="line">	fields[<span class="string">"method"</span>] = method</span><br><span class="line">	fields[<span class="string">"url"</span>] = ctx.Request().URL.String()</span><br><span class="line">	fields[<span class="string">"proto"</span>] = ctx.Request().Proto</span><br><span class="line">	<span class="comment">//fields["header"] = ctx.Request().Header</span></span><br><span class="line">	fields[<span class="string">"user_agent"</span>] = ctx.Request().UserAgent()</span><br><span class="line">	fields[<span class="string">"x_request_id"</span>] = ctx.GetHeader(<span class="string">"X-Request-Id"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果是POST/PUT请求，并且内容类型为JSON，则读取内容体</span></span><br><span class="line">	<span class="keyword">if</span> method == http.MethodPost || method == http.MethodPut || method == http.MethodPatch &#123;</span><br><span class="line">		body, err := ioutil.ReadAll(ctx.Request().Body)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> ctx.Request().Body.Close()</span><br><span class="line">			buf := bytes.NewBuffer(body)</span><br><span class="line">			ctx.Request().Body = ioutil.NopCloser(buf)</span><br><span class="line">			fields[<span class="string">"content_length"</span>] = ctx.GetContentLength()</span><br><span class="line">			fields[<span class="string">"body"</span>] = <span class="keyword">string</span>(body)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ctx.Next()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//下面是返回日志</span></span><br><span class="line">	fields[<span class="string">"res_status"</span>] = ctx.ResponseWriter().StatusCode()</span><br><span class="line">	<span class="keyword">if</span> ctx.Values().GetString(<span class="string">"out_err"</span>) != <span class="string">""</span> &#123;</span><br><span class="line">		fields[<span class="string">"out_err"</span>] = ctx.Values().GetString(<span class="string">"out_err"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fields[<span class="string">"res_length"</span>] = ctx.ResponseWriter().Header().Get(<span class="string">"size"</span>)</span><br><span class="line">	<span class="keyword">if</span> v := ctx.Values().Get(<span class="string">"res_body"</span>); v != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> b, ok := v.([]<span class="keyword">byte</span>); ok &#123;</span><br><span class="line">			fields[<span class="string">"res_body"</span>] = <span class="keyword">string</span>(b)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	token := ctx.Values().Get(<span class="string">"jwt"</span>)</span><br><span class="line">	<span class="keyword">if</span> token != <span class="literal">nil</span> &#123;</span><br><span class="line">		fields[<span class="string">"uid"</span>] = token.(*jwt.Token).Claims</span><br><span class="line">	&#125;</span><br><span class="line">	timeConsuming := time.Since(start).Nanoseconds() / <span class="number">1e6</span></span><br><span class="line">	config.Log.WithFields(fields).Infof(<span class="string">"[http] %s-%s-%s-%d(%dms)"</span>,</span><br><span class="line">		p, ctx.Request().Method, ctx.Request().RemoteAddr, ctx.ResponseWriter().StatusCode(), timeConsuming)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>加进路由<code>route/route.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12/mvc"</span></span><br><span class="line">	<span class="string">"goms/controllers"</span></span><br><span class="line">	<span class="string">"goms/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRoute</span><span class="params">(app *iris.Application)</span></span> &#123;</span><br><span class="line">	app.Use(middleware.LoggerHandler)</span><br><span class="line"></span><br><span class="line">	mvc.Configure(app.Party(<span class="string">"/account"</span>), <span class="function"><span class="keyword">func</span><span class="params">(m *mvc.Application)</span></span> &#123;</span><br><span class="line">		m.Handle(controllers.NewLoginController())</span><br><span class="line">	&#125;)</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后感觉还是不咋好用，用Json格式不太好看，用Text格式又没有时间，再寻找一下别的Log库看看！</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>iris</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>golang笔记：操作xlsx</title>
    <url>/golang%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9Cxlsx.html</url>
    <content><![CDATA[<h3 id="第三方库："><a href="#第三方库：" class="headerlink" title="第三方库："></a>第三方库：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">github.com/tealeg/xlsx</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/tealeg/xlsx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    inFile = <span class="string">"/Users/chain/Downloads/student1.xlsx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Import</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    xlFile, err := xlsx.OpenFile(inFile)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历sheet页读取</span></span><br><span class="line">    <span class="keyword">for</span> _, sheet := <span class="keyword">range</span> xlFile.Sheets &#123;</span><br><span class="line">        fmt.Println(<span class="string">"sheet name: "</span>, sheet.Name)</span><br><span class="line">        <span class="comment">//遍历行读取</span></span><br><span class="line">        <span class="keyword">for</span> _, row := <span class="keyword">range</span> sheet.Rows &#123;</span><br><span class="line">            <span class="comment">// 遍历每行的列读取</span></span><br><span class="line">            <span class="keyword">for</span> _, cell := <span class="keyword">range</span> row.Cells &#123;</span><br><span class="line">                text := cell.String()</span><br><span class="line">                fmt.Printf(<span class="string">"%20s"</span>, text)</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Print(<span class="string">"\n"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"\n\nimport success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/tealeg/xlsx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    inFile = <span class="string">"/Users/chain/Downloads/student1.xlsx"</span></span><br><span class="line">    outFile = <span class="string">"/Users/chain/Downloads/out_student.xlsx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    Phone <span class="keyword">string</span></span><br><span class="line">    Gender <span class="keyword">string</span></span><br><span class="line">    Mail <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Export</span><span class="params">()</span></span>&#123;</span><br><span class="line">    file := xlsx.NewFile()</span><br><span class="line">    sheet, err := file.AddSheet(<span class="string">"student_list"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    stus := getStudents()</span><br><span class="line">    <span class="comment">//add data</span></span><br><span class="line">    <span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus&#123;</span><br><span class="line">        row := sheet.AddRow()</span><br><span class="line">        nameCell := row.AddCell()</span><br><span class="line">        nameCell.Value = stu.Name</span><br><span class="line"></span><br><span class="line">        ageCell := row.AddCell()</span><br><span class="line">        ageCell.Value = strconv.Itoa(stu.age)</span><br><span class="line"></span><br><span class="line">        phoneCell := row.AddCell()</span><br><span class="line">        phoneCell.Value = stu.Phone</span><br><span class="line"></span><br><span class="line">        genderCell := row.AddCell()</span><br><span class="line">        genderCell.Value = stu.Gender</span><br><span class="line"></span><br><span class="line">        mailCell := row.AddCell()</span><br><span class="line">        mailCell.Value = stu.Mail</span><br><span class="line">    &#125;</span><br><span class="line">    err = file.Save(outFile)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"\n\nexport success"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStudents</span><span class="params">()</span>[]<span class="title">Student</span></span>&#123;</span><br><span class="line">    students := <span class="built_in">make</span>([]Student, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line">        stu := Student&#123;&#125;</span><br><span class="line">        stu.Name = <span class="string">"name"</span> + strconv.Itoa(i + <span class="number">1</span>)</span><br><span class="line">        stu.Mail = stu.Name + <span class="string">"@chairis.cn"</span></span><br><span class="line">        stu.Phone = <span class="string">"1380013800"</span> + strconv.Itoa(i)</span><br><span class="line">        stu.age = <span class="number">20</span></span><br><span class="line">        stu.Gender = <span class="string">"男"</span></span><br><span class="line">        students = <span class="built_in">append</span>(students, stu)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> students</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang笔记：读写文件</title>
    <url>/golang%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   Ioutil(<span class="string">"mytestfile.txt"</span>)</span><br><span class="line">   OsIoutil(<span class="string">"mytestfile.txt"</span>)</span><br><span class="line">   FileRead(<span class="string">"mytestfile.txt"</span>)</span><br><span class="line">   BufioRead(<span class="string">"mytestfile.txt"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Ioutil</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> contents,err := ioutil.ReadFile(name);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">//因为contents是[]byte类型，直接转换成string类型后会多一行空格,需要使用strings.Replace替换换行符</span></span><br><span class="line">        result := strings.Replace(<span class="keyword">string</span>(contents),<span class="string">"\n"</span>,<span class="string">""</span>,<span class="number">1</span>)</span><br><span class="line">        fmt.Println(<span class="string">"Use ioutil.ReadFile to read a file:"</span>,result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OsIoutil</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> fileObj,err := os.Open(name);err == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">//if fileObj,err := os.OpenFile(name,os.O_RDONLY,0644); err == nil &#123;</span></span><br><span class="line">        <span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">        <span class="keyword">if</span> contents,err := ioutil.ReadAll(fileObj); err == <span class="literal">nil</span> &#123;</span><br><span class="line">            result := strings.Replace(<span class="keyword">string</span>(contents),<span class="string">"\n"</span>,<span class="string">""</span>,<span class="number">1</span>)</span><br><span class="line">            fmt.Println(<span class="string">"Use os.Open family functions and ioutil.ReadAll to read a file :"</span>,result)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileRead</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fileObj,err := os.Open(name);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">        <span class="comment">//在定义空的byte列表时尽量大一些，否则这种方式读取内容可能造成文件读取不完整</span></span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> n,err := fileObj.Read(buf);err == <span class="literal">nil</span> &#123;</span><br><span class="line">               fmt.Println(<span class="string">"The number of bytes read:"</span>+strconv.Itoa(n),<span class="string">"Buf length:"</span>+strconv.Itoa(<span class="built_in">len</span>(buf)))</span><br><span class="line">               result := strings.Replace(<span class="keyword">string</span>(buf),<span class="string">"\n"</span>,<span class="string">""</span>,<span class="number">1</span>)</span><br><span class="line">               fmt.Println(<span class="string">"Use os.Open and File's Read method to read a file:"</span>,result)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BufioRead</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fileObj,err := os.Open(name);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">        <span class="comment">//一个文件对象本身是实现了io.Reader的 使用bufio.NewReader去初始化一个Reader对象，存在buffer中的，读取一次就会被清空</span></span><br><span class="line">        reader := bufio.NewReader(fileObj)</span><br><span class="line">        <span class="comment">//使用ReadString(delim byte)来读取delim以及之前的数据并返回相关的字符串.</span></span><br><span class="line">        <span class="keyword">if</span> result,err := reader.ReadString(<span class="keyword">byte</span>(<span class="string">'@'</span>));err == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"使用ReadSlince相关方法读取内容:"</span>,result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意:上述ReadString已经将buffer中的数据读取出来了，下面将不会输出内容</span></span><br><span class="line">        <span class="comment">//需要注意的是，因为是将文件内容读取到[]byte中，因此需要对大小进行一定的把控</span></span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">//读取Reader对象中的内容到[]byte类型的buf中</span></span><br><span class="line">        <span class="keyword">if</span> n,err := reader.Read(buf); err == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"The number of bytes read:"</span>+strconv.Itoa(n))</span><br><span class="line">            <span class="comment">//这里的buf是一个[]byte，因此如果需要只输出内容，仍然需要将文件内容的换行符替换掉</span></span><br><span class="line">            fmt.Println(<span class="string">"Use bufio.NewReader and os.Open read file contents to a []byte:"</span>,<span class="keyword">string</span>(buf))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">      name := <span class="string">"testwritefile.txt"</span></span><br><span class="line">      content := <span class="string">"Hello, xxbandy.github.io!\n"</span></span><br><span class="line">      WriteWithIoutil(name,content)</span><br><span class="line">      contents := <span class="string">"Hello, xuxuebiao\n"</span></span><br><span class="line">      <span class="comment">//清空一次文件并写入两行contents</span></span><br><span class="line">      WriteWithFileWrite(name,contents)</span><br><span class="line">      WriteWithIo(name,content)</span><br><span class="line">      <span class="comment">//使用bufio包需要将数据先读到buffer中，然后在flash到磁盘中</span></span><br><span class="line">      WriteWithBufio(name,contents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ioutil.WriteFile方式写入文件,是将[]byte内容写入文件,如果content字符串中没有换行符的话，默认就不会有换行符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteWithIoutil</span><span class="params">(name,content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    data :=  []<span class="keyword">byte</span>(content)</span><br><span class="line">    <span class="keyword">if</span> ioutil.WriteFile(name,data,<span class="number">0644</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"写入文件成功:"</span>,content)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用os.OpenFile()相关函数打开文件对象，并使用文件对象的相关方法进行文件写入操作</span></span><br><span class="line"><span class="comment">//清空一次文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteWithFileWrite</span><span class="params">(name,content <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">    fileObj,err := os.OpenFile(name,os.O_RDWR|os.O_CREATE|os.O_TRUNC,<span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Failed to open the file"</span>,err.Error())</span><br><span class="line">        os.Exit(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">    <span class="keyword">if</span> _,err := fileObj.WriteString(content);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Successful writing to the file with os.OpenFile and *File.WriteString method."</span>,content)</span><br><span class="line">    &#125;</span><br><span class="line">    contents := []<span class="keyword">byte</span>(content)</span><br><span class="line">    <span class="keyword">if</span> _,err := fileObj.Write(contents);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Successful writing to thr file with os.OpenFile and *File.Write method."</span>,content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用io.WriteString()函数进行数据的写入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteWithIo</span><span class="params">(name,content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fileObj,err := os.OpenFile(name,os.O_RDWR|os.O_CREATE|os.O_APPEND,<span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Failed to open the file"</span>,err.Error())</span><br><span class="line">        os.Exit(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>  _,err := io.WriteString(fileObj,content);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Successful appending to the file with os.OpenFile and io.WriteString."</span>,content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bufio包中Writer对象的相关方法进行数据的写入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteWithBufio</span><span class="params">(name,content <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fileObj,err := os.OpenFile(name,os.O_RDWR|os.O_CREATE|os.O_APPEND,<span class="number">0644</span>);err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> fileObj.Close()</span><br><span class="line">        writeObj := bufio.NewWriterSize(fileObj,<span class="number">4096</span>)</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">       <span class="keyword">if</span> _,err := writeObj.WriteString(content);err == <span class="literal">nil</span> &#123;</span><br><span class="line">              fmt.Println(<span class="string">"Successful appending buffer and flush to file with bufio's Writer obj WriteString method"</span>,content)</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Write方法,需要使用Writer对象的Flush方法将buffer中的数据刷到磁盘</span></span><br><span class="line">        buf := []<span class="keyword">byte</span>(content)</span><br><span class="line">        <span class="keyword">if</span> _,err := writeObj.Write(buf);err == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Successful appending to the buffer with os.OpenFile and bufio's Writer obj Write method."</span>,content)</span><br><span class="line">            <span class="keyword">if</span>  err := writeObj.Flush(); err != <span class="literal">nil</span> &#123;<span class="built_in">panic</span>(err)&#125;</span><br><span class="line">            fmt.Println(<span class="string">"Successful flush the buffer data to file "</span>,content)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive搭建</title>
    <url>/Hive%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<p>在hadoop的基础安装hive，我在node-1上面安装hive</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>hadoop环境</li>
<li>Mysql服务</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf apache-hive-3.1.2-bin.tar.gz</span><br><span class="line">mv apache-hive-3.1.2 /usr/<span class="built_in">local</span>/hive</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/usr/<span class="built_in">local</span>/hive</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>hive的主要配置目录在: /usr/local/hive/conf</p>
<h4 id="hive-env-sh"><a href="#hive-env-sh" class="headerlink" title="hive-env.sh"></a>hive-env.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure>

<p>修改配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hive/conf</span><br></pre></td></tr></table></figure>

<h4 id="hive-site-xml"><a href="#hive-site-xml" class="headerlink" title="hive-site.xml"></a>hive-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/hive/tmp -p</span><br></pre></td></tr></table></figure>

<p>修改hive-site.xml</p>
<ul>
<li>删除  ‘&amp;#8’</li>
<li>把 ${system:java.io.tmpdir} 修改成 /usr/local/apache-hive-3.1.2-bin/tmp；修改的操作命令如下（采用的vim全局替换命令）：%s/${system:java.io.tmpdir}//usr/local/apache-hive-3.1.2-bin/tmp/g；</li>
<li>把 {system:user.name} 修改成 {user.name}；修改的操作命令如下（采用的vim全局替换命令）：%s/{system:user.name}/{user.name}/g；</li>
</ul>
<p>修改数据库连接配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?characterEncoding=UTF-8&amp;amp;createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>******<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改hive-jdbc连接配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0.0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改客户端连接认证方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.authentication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>NOSASL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加Mysql连接驱动"><a href="#添加Mysql连接驱动" class="headerlink" title="添加Mysql连接驱动"></a>添加Mysql连接驱动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-connector-java-8.0.18-1.el7.noarch.rpm</span><br><span class="line">cp /usr/share/java/mysql-connector-java.jar /usr/<span class="built_in">local</span>/hive/lib/</span><br></pre></td></tr></table></figure>

<h3 id="更新guava-jar包"><a href="#更新guava-jar包" class="headerlink" title="更新guava.jar包"></a>更新guava.jar包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/hadoop/share/hadoop/hdfs/lib/guava-27.0-jre.jar  /usr/<span class="built_in">local</span>/hive/lib/</span><br><span class="line">rm -f /usr/<span class="built_in">local</span>/hive/lib/guava-19.0.jar</span><br></pre></td></tr></table></figure>

<h3 id="初始化元数据"><a href="#初始化元数据" class="headerlink" title="初始化元数据"></a>初始化元数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema --verbose</span><br></pre></td></tr></table></figure>

<h3 id="启动hive"><a href="#启动hive" class="headerlink" title="启动hive"></a>启动hive</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hive</span><br><span class="line">./bin/hive --service metastore &amp;</span><br><span class="line">./bin/hive --service hiveserver2 &amp;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create external table <span class="keyword">if</span> not exists testExtNew(</span><br><span class="line">name string,</span><br><span class="line">addr string</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by <span class="string">'\t'</span> </span><br><span class="line">lines terminated by <span class="string">'\n'</span> </span><br><span class="line">stored as textfile</span><br><span class="line">location <span class="string">'/wisp/test/'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from testExtNew;</span><br></pre></td></tr></table></figure>

<h4 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node-1 data]<span class="comment"># cat test.txt </span></span><br><span class="line">wisp	aaaaaaaaaa</span><br><span class="line">lhp	bbbbbbb</span><br><span class="line"><span class="built_in">test</span>	cccccccccc</span><br><span class="line">tttt	asdfasf</span><br><span class="line">tttt	asdfasf</span><br><span class="line">tsadfasdf	asddddddd1fasf</span><br><span class="line"></span><br><span class="line">[root@node-1 data]<span class="comment"># hadoop fs -put /data/test.txt /wisp/test/</span></span><br><span class="line">[root@node-1 data]<span class="comment"># hive</span></span><br><span class="line">hive&gt; select * from testExtNew;</span><br><span class="line">OK</span><br><span class="line">tttt	asdfasf</span><br><span class="line">tttt	asdfasf</span><br><span class="line">tsadfasdf	asddddddd1fasf</span><br><span class="line">wisp	aaaaaaaaaa</span><br><span class="line">lhp	bbbbbbb</span><br><span class="line"><span class="built_in">test</span>	cccccccccc</span><br></pre></td></tr></table></figure>

<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>Hive数据加载：<a href="https://blog.csdn.net/scgaliguodong123_/article/details/46906427" target="_blank" rel="noopener">https://blog.csdn.net/scgaliguodong123_/article/details/46906427</a></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>hadoop</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop集群搭建</title>
    <url>/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<p>在Centos7系统上进行安装，采用hadoop3.2.1</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th>IP</th>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.9.214</td>
<td>node-1</td>
<td>ResourceManager<br />NameNode<br />DataNode<br />NodeManager</td>
</tr>
<tr>
<td>192.168.9.215</td>
<td>node-2</td>
<td>SecondaryNameNode<br />NodeManager<br />DataNode</td>
</tr>
<tr>
<td>192.168.9.216</td>
<td>node-3</td>
<td>NodeManager<br />DataNode</td>
</tr>
</tbody></table>
<h4 id="修改机器名"><a href="#修改机器名" class="headerlink" title="修改机器名"></a>修改机器名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname node-1/node-2/node-3</span><br></pre></td></tr></table></figure>

<h4 id="设置HOSTS"><a href="#设置HOSTS" class="headerlink" title="设置HOSTS"></a>设置HOSTS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.9.214 node-1</span><br><span class="line">192.168.9.215 node-2</span><br><span class="line">192.168.9.216 node-3</span><br></pre></td></tr></table></figure>

<h4 id="配置免密码登陆"><a href="#配置免密码登陆" class="headerlink" title="配置免密码登陆"></a>配置免密码登陆</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在node-1中：</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id node-2</span><br><span class="line">ssh-copy-id node-3</span><br></pre></td></tr></table></figure>

<h4 id="关闭防火墙、selinux"><a href="#关闭防火墙、selinux" class="headerlink" title="关闭防火墙、selinux"></a>关闭防火墙、selinux</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">systemctl stop iptables</span><br><span class="line">systemctl <span class="built_in">disable</span> iptables</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf jdk-8u221-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_221 /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_221</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="安装配置Hadoop"><a href="#安装配置Hadoop" class="headerlink" title="安装配置Hadoop"></a>安装配置Hadoop</h3><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf hadoop-3.2.1.tar.gz</span><br><span class="line">mv hadoop-3.2.1 /usr/<span class="built_in">local</span>/hadoop</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; <span class="string">"EOF"</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"-Djava.library.path=<span class="variable">$HADOOP_HOME</span>/lib:<span class="variable">$HADOOP_COMMON_LIB_NATIVE_DIR</span>"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>配置文件全部放在/usr/local/hadoop/etc/hadoop目录下</p>
<h5 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h5><p>增加JDK路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_221</span><br></pre></td></tr></table></figure>

<h5 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定hadoop运行时产生文件的存储目录,可以指定自己熟悉的目录，默认/tmp/hadoop-$&#123;user.name&#125; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/data/hddata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定hadoop使用的文件系统，HDFS的老大NameNode的地址 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node-1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其他机器也要创建</span></span><br><span class="line">mkdir -p /data/hadoop/data/hddata</span><br></pre></td></tr></table></figure>

<h5 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定HDFS副本数量，默认3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>node-2:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其他机器也要创建</span></span><br><span class="line">mkdir -p /data/hadoop/hdfs/name</span><br><span class="line">mkdir -p /data/hadoop/hdfs/data</span><br></pre></td></tr></table></figure>

<h5 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定mapred运行时的框架：yarn，默认local --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node-1:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定yarn（老大）的地址（ResourceManager） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>node-1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- nodemanager上运行的附属服务，指定mapreduce_shuffle才可以运行mapReduce默认 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h5><p>删除内容添加机器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node-1</span><br><span class="line">node-2</span><br><span class="line">node-3</span><br></pre></td></tr></table></figure>

<h5 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h5><p>删除内容添加机器， 这份配置是允许哪些机器启动data节点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node-1</span><br><span class="line">node-2</span><br><span class="line">node-3</span><br></pre></td></tr></table></figure>

<h4 id="同步文件到其他服务器"><a href="#同步文件到其他服务器" class="headerlink" title="同步文件到其他服务器"></a>同步文件到其他服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avzP /uar/<span class="built_in">local</span>/hadoop root@node-2:/usr/<span class="built_in">local</span>/</span><br><span class="line">rsync -avzP /uar/<span class="built_in">local</span>/hadoop root@node-3:/usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">scp /etc/profile root@node-2:/etc</span><br><span class="line">scp /etc/profile root@node-3:/etc</span><br></pre></td></tr></table></figure>

<h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><h4 id="格式化dhfs"><a href="#格式化dhfs" class="headerlink" title="格式化dhfs"></a>格式化dhfs</h4><p>格式化只能在初始启动之前启动一次，是对文件系统进行一些初始化操作，因为此时hdfs还不存在；在初始化完成之后，集群启动，之后不能再进行初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hadoop</span><br><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure>

<h4 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node-1 hadoop]<span class="comment"># jps</span></span><br><span class="line">12996 NodeManager</span><br><span class="line">12231 NameNode</span><br><span class="line">12409 DataNode</span><br><span class="line">24748 Jps</span><br><span class="line">12782 ResourceManager</span><br><span class="line"></span><br><span class="line">[root@node-2 ~]<span class="comment"># jps</span></span><br><span class="line">18001 DataNode</span><br><span class="line">21990 Jps</span><br><span class="line">18106 SecondaryNameNode</span><br><span class="line">18186 NodeManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@node-3 ~]<span class="comment"># jps</span></span><br><span class="line">18001 DataNode</span><br><span class="line">21990 Jps</span><br><span class="line">18186 NodeManager</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br><span class="line">hdfs dfs  -mkdir /wisp</span><br><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure>

<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li>ResourceManager页面：<a href="http://192.168.9.214:8088/" target="_blank" rel="noopener">http://192.168.9.214:8088/</a></li>
<li>Hadoop HDFS文件操作：<a href="https://segmentfault.com/a/1190000002672666" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002672666</a></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>golang iris 学习三: casbin权限验证</title>
    <url>/golang-iris-%E5%AD%A6%E4%B9%A0%E4%B8%89-casbin%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81.html</url>
    <content><![CDATA[<p><a href="https://casbin.org/docs/zh-CN/tutorials" target="_blank" rel="noopener">Casbin官方教程</a> </p>
<p>撸个简单的权限系统：用户包含角色， 角色包含权限</p>
<h3 id="先定义一份简单的权限规则库"><a href="#先定义一份简单的权限规则库" class="headerlink" title="先定义一份简单的权限规则库"></a>先定义一份简单的权限规则库</h3><p>相当于定义菜单权限</p>
<p>casbin.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m = r.sub == p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; (p.act == &quot;*&quot; || regexMatch(r.act, p.act))</span><br></pre></td></tr></table></figure>

<ul>
<li>request_definition: 可以理解为验证函数传进去的参数</li>
<li>policy_definition: 可以理解为添加规则函数传进去的参数，就是存进数据库的数据规则</li>
<li>policy_effect: 对结果进行判定</li>
<li>matchers: 匹配规则</li>
</ul>
<p>先测试一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    enforcer := datasource.GetEnforce()</span><br><span class="line"></span><br><span class="line">    // 添加规则</span><br><span class="line">    ok, err := enforcer.AddPolicy(&quot;测试&quot;, &quot;test.a1&quot;, &quot;test&quot;, &quot;/test/a1&quot;, &quot;get&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;添加规则：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 测试规则</span><br><span class="line">    ok, err = enforcer.Enforce(&quot;test.a1&quot;, &quot;/test/a1&quot;, &quot;get&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    ok, err = enforcer.Enforce(&quot;test.a1&quot;, &quot;/test/a111&quot;, &quot;get&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">添加规则：true</span><br><span class="line">规则测试：true</span><br><span class="line">规则测试：false</span><br></pre></td></tr></table></figure>

<h3 id="增加组的权限"><a href="#增加组的权限" class="headerlink" title="增加组的权限"></a>增加组的权限</h3><p>相当于角色权限 和 用户权限</p>
<p>casbin.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line">[role_definition]</span><br><span class="line">g = _, _</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m = g(r.sub, p.sub) &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; (p.act == &quot;*&quot; || regexMatch(r.act, p.act))</span><br></pre></td></tr></table></figure>

<ul>
<li>role_definition: 分组功能</li>
</ul>
<p>测试代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;goms/datasource&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    enforcer := datasource.GetEnforce()</span><br><span class="line"></span><br><span class="line">    // 添加规则</span><br><span class="line">    ok, err := enforcer.AddPolicy(&quot;test.a1&quot;, &quot;/test/a1&quot;, &quot;get&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;添加规则：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 测试规则</span><br><span class="line">    ok, err = enforcer.Enforce(&quot;test.a1&quot;, &quot;/test/a1&quot;, &quot;get&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    ok, err = enforcer.Enforce(&quot;test.a1&quot;, &quot;/test/a111&quot;, &quot;get&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 添加角色</span><br><span class="line">    ok, _ = enforcer.AddGroupingPolicy(&quot;yy&quot;, &quot;test.a1&quot;)</span><br><span class="line">    fmt.Printf(&quot;添加角色：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 测试角色</span><br><span class="line">    ok, _ = enforcer.Enforce(&quot;yy&quot;, &quot;/test/a1&quot;, &quot;get&quot;)</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    ok, _ = enforcer.Enforce(&quot;yy&quot;, &quot;/test/a111&quot;, &quot;get&quot;)</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 添加用户</span><br><span class="line">    ok, _ = enforcer.AddGroupingPolicy(&quot;wisp&quot;, &quot;yy&quot;)</span><br><span class="line">    fmt.Printf(&quot;添加角色：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 测试用户</span><br><span class="line">    ok, _ = enforcer.Enforce(&quot;wisp&quot;, &quot;/test/a1&quot;, &quot;get&quot;)</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    ok, _ = enforcer.Enforce(&quot;wisp&quot;, &quot;/test/a111&quot;, &quot;get&quot;)</span><br><span class="line">    fmt.Printf(&quot;规则测试：%v\n&quot;, ok)</span><br><span class="line"></span><br><span class="line">    // 查询</span><br><span class="line">    ret := enforcer.GetFilteredPolicy(0, &quot;test.a1&quot;)</span><br><span class="line">    fmt.Println(ret)</span><br><span class="line"></span><br><span class="line">    ret = enforcer.GetFilteredGroupingPolicy(0, &quot;yy&quot;)</span><br><span class="line">    fmt.Println(ret)</span><br><span class="line"></span><br><span class="line">    ret = enforcer.GetFilteredGroupingPolicy(0, &quot;wisp&quot;)</span><br><span class="line">    fmt.Println(ret)</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">添加规则：false</span><br><span class="line">规则测试：true</span><br><span class="line">规则测试：false</span><br><span class="line">添加角色：false</span><br><span class="line">规则测试：true</span><br><span class="line">规则测试：false</span><br><span class="line">添加角色：true</span><br><span class="line">规则测试：true</span><br><span class="line">规则测试：false</span><br><span class="line">[[test.a1 /test/a1 get]]</span><br><span class="line">[[yy test.a1]]</span><br><span class="line">[[wisp yy]]</span><br></pre></td></tr></table></figure>

<p>很简单，wisp拥有yy角色，yy角色包含test.a1 /test/a1 get 权限</p>
<p>怎么结合到iris里面去呢，想来想去也想不懂，总不能把用户系统写到casbin里面来吧，要不就添加用户权限的时候更新一下casbin数据库，要不就登陆或者刷新的时候把用户权限写进casbin数据库，感觉麻，还是后面这种方便一点</p>
<h3 id="先增加一份初始化代码"><a href="#先增加一份初始化代码" class="headerlink" title="先增加一份初始化代码"></a>先增加一份初始化代码</h3><p>datasource/casbin.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/casbin/casbin/v2"</span></span><br><span class="line">	mongodbadapter <span class="string">"github.com/casbin/mongodb-adapter/v2"</span></span><br><span class="line">	<span class="string">"goms/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Enforcer *casbin.Enforcer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mongoInfo := config.GConfig.Mongo</span><br><span class="line">	mongoUrl := fmt.Sprintf(<span class="string">"mongodb://%s:%d/%s"</span>, mongoInfo.Host, mongoInfo.Port, mongoInfo.Name)</span><br><span class="line">	a := mongodbadapter.NewAdapter(mongoUrl)</span><br><span class="line"></span><br><span class="line">	e, err := casbin.NewEnforcer(<span class="string">"casbin.conf"</span>, a)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	e.LoadPolicy()</span><br><span class="line">	e.EnableAutoSave(<span class="literal">true</span>)</span><br><span class="line">	Enforcer = e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetEnforce</span><span class="params">()</span> *<span class="title">casbin</span>.<span class="title">Enforcer</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Enforcer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增加casbin规则的增加、删除方法"><a href="#增加casbin规则的增加、删除方法" class="headerlink" title="增加casbin规则的增加、删除方法"></a>增加casbin规则的增加、删除方法</h3><p>repo/login_repo.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> repo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/datasource"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginRepository <span class="keyword">interface</span> &#123;</span><br><span class="line">	Check(query bson.M) (user datamodels.User, err error)</span><br><span class="line">	RemovePolicy(userID <span class="keyword">string</span>) (err error)</span><br><span class="line">	LoadPolicy(userID <span class="keyword">string</span>, menu datamodels.Menu) (err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">	collection <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLoginRepository</span><span class="params">()</span> <span class="title">LoginRepository</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;loginRepository&#123;collection: <span class="string">"project_user"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *loginRepository)</span> <span class="title">Check</span><span class="params">(query bson.M)</span> <span class="params">(user datamodels.User, err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(l.collection)</span><br><span class="line"></span><br><span class="line">	err = col.Find(query).One(&amp;user)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !user.IsActive &#123;</span><br><span class="line">		err = fmt.Errorf(<span class="string">"该用户已被禁用！"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *loginRepository)</span> <span class="title">RemovePolicy</span><span class="params">(userID <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	enforcer := datasource.GetEnforce()</span><br><span class="line">	_, err = enforcer.RemoveFilteredPolicy(<span class="number">0</span>, userID)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *loginRepository)</span> <span class="title">LoadPolicy</span><span class="params">(userID <span class="keyword">string</span>, menu datamodels.Menu)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	enforcer := datasource.GetEnforce()</span><br><span class="line">	<span class="keyword">for</span> _, permission := <span class="keyword">range</span> menu.Permission &#123;</span><br><span class="line">		<span class="keyword">if</span> permission.Url == <span class="string">""</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		_, err = enforcer.AddPolicy(userID, permission.Url, permission.Method)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要就是利用casbin的两个API：</p>
<ul>
<li>enforcer.RemoveFilteredPolicy</li>
<li>enforcer.AddPolicy</li>
</ul>
<h3 id="用户刷新的时候更新一次casbin权限"><a href="#用户刷新的时候更新一次casbin权限" class="headerlink" title="用户刷新的时候更新一次casbin权限"></a>用户刷新的时候更新一次casbin权限</h3><p>说白了当这个东西是个缓存来用</p>
<p>services/login_service.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *loginService)</span> <span class="title">Info</span><span class="params">(tokenString <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	claims, _ := middleware.ParseToken(tokenString)</span><br><span class="line">	username := claims[<span class="string">"username"</span>].(<span class="keyword">string</span>)</span><br><span class="line">	user, err := l.repo.Check(bson.M&#123;<span class="string">"username"</span>: username&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = config.DBSelectErr</span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"查询数据失败：%v"</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> user.IsAdmin &#123;</span><br><span class="line">		user.Roles = []<span class="keyword">string</span>&#123;<span class="string">"admin"</span>&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		menuCodes := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">5</span>)</span><br><span class="line">		l.repo.RemovePolicy(user.ID.Hex())  <span class="comment">// 删除该用户全部权限</span></span><br><span class="line">		<span class="keyword">for</span> _, id := <span class="keyword">range</span> user.Roles &#123;</span><br><span class="line">			role, _ := l.roleRepo.GetByID(id)</span><br><span class="line">			<span class="keyword">for</span> _, menuID := <span class="keyword">range</span> role.Menus &#123;</span><br><span class="line">				menu, _ := l.menuRepo.GetByID(menuID)</span><br><span class="line">				l.repo.LoadPolicy(user.ID.Hex(), menu)  <span class="comment">// 重新添加用户权限</span></span><br><span class="line">				menuCodes = <span class="built_in">append</span>(menuCodes, menu.Code)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		user.Roles = menuCodes</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = config.StatusOk</span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	response.Data = user</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户登陆或者刷新后数据库保存的规则如下：</p>
<p><img src="/images/20191206093921.png" alt="20191206093921"></p>
<h3 id="增加中间件验证权限："><a href="#增加中间件验证权限：" class="headerlink" title="增加中间件验证权限："></a>增加中间件验证权限：</h3><p>middleware/casbin_middleware.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12"</span></span><br><span class="line">	<span class="string">"goms/config"</span></span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/datasource"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CasbinHandler</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">	token := ctx.Values().Get(<span class="string">"jwt"</span>).(*jwt.Token)</span><br><span class="line">	claims := token.Claims.(jwt.MapClaims)</span><br><span class="line">	userID := claims[<span class="string">"userId"</span>]</span><br><span class="line">	isAdmin := claims[<span class="string">"isAdmin"</span>].(<span class="keyword">bool</span>)</span><br><span class="line">	url := ctx.Path()</span><br><span class="line">	method := ctx.Method()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> !isAdmin &#123;</span><br><span class="line">		enforcer := datasource.GetEnforce()</span><br><span class="line">		enforcer.LoadPolicy()</span><br><span class="line">		ok, _ := enforcer.Enforce(userID, url, method)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			ctx.StopExecution()</span><br><span class="line">			response := &amp;datamodels.Response&#123;</span><br><span class="line">				Code: config.AccessDenied,</span><br><span class="line">				Msg:  <span class="string">"没有权限！"</span>,</span><br><span class="line">			&#125;</span><br><span class="line">			ctx.JSON(response)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ctx.Next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="把中间件添加进路由"><a href="#把中间件添加进路由" class="headerlink" title="把中间件添加进路由"></a>把中间件添加进路由</h3><p>route/route.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/v12/mvc"</span></span><br><span class="line">	<span class="string">"goms/controllers"</span></span><br><span class="line">	<span class="string">"goms/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRoute</span><span class="params">(app *iris.Application)</span></span> &#123;</span><br><span class="line">	mvc.Configure(app.Party(<span class="string">"/account"</span>), <span class="function"><span class="keyword">func</span><span class="params">(m *mvc.Application)</span></span> &#123;</span><br><span class="line">		m.Handle(controllers.NewLoginController())</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	app.Use(middleware.JwtHandler().Serve)</span><br><span class="line">	app.Use(middleware.CasbinHandler)</span><br><span class="line"></span><br><span class="line">	bathPath := <span class="string">"/api/v1"</span></span><br><span class="line">	mvc.Configure(app.Party(bathPath+<span class="string">"/games"</span>), <span class="function"><span class="keyword">func</span><span class="params">(m *mvc.Application)</span></span> &#123;</span><br><span class="line">		m.Handle(controllers.NewGameController())</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大功告成~</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>iris</tag>
        <tag>casbin</tag>
      </tags>
  </entry>
  <entry>
    <title>golang iris 学习二:添加Jwt验证</title>
    <url>/golang-iris-%E5%AD%A6%E4%B9%A0%E4%BA%8C-%E6%B7%BB%E5%8A%A0Jwt%E9%AA%8C%E8%AF%81.html</url>
    <content><![CDATA[<p><a href="https://blog.wangjunfeng.com/post/golang-jwt/" target="_blank" rel="noopener">Jwt科普</a> </p>
<h3 id="在开始之前"><a href="#在开始之前" class="headerlink" title="在开始之前"></a>在开始之前</h3><p>先把</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;github.com/kataras/iris&quot;</span><br></pre></td></tr></table></figure>
<p>这个为库替换成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;github.com/kataras/iris/v12&quot;</span><br></pre></td></tr></table></figure>
<p>要不然在使用Jwt中间件的时候会报错</p>
<h3 id="先加个配置"><a href="#先加个配置" class="headerlink" title="先加个配置"></a>先加个配置</h3><p>config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwt:</span><br><span class="line">  SecretKey: sdfadfasdfdas</span><br><span class="line">  exp: 480</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>定义一个Key和过期时间（以分钟为单位）</p>
<h3 id="解析配置"><a href="#解析配置" class="headerlink" title="解析配置"></a>解析配置</h3><p>config/config.go</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">type jwtConfig struct &#123;</span><br><span class="line">	SecretKey string `yaml:&quot;SecretKey&quot;`</span><br><span class="line">	Exp       int    `yaml:&quot;exp&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type globalConfig struct &#123;</span><br><span class="line">	Mongo mongoConfig `yaml:&quot;mongo&quot;`</span><br><span class="line">	Jwt   jwtConfig   `yaml:&quot;jwt&quot;`</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="撸个生成Token、解析Token及验证Toke的方法"><a href="#撸个生成Token、解析Token及验证Toke的方法" class="headerlink" title="撸个生成Token、解析Token及验证Toke的方法"></a>撸个生成Token、解析Token及验证Toke的方法</h3><p>middleware/jwt_middleware.go</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">	&quot;github.com/dgrijalva/jwt-go&quot;</span><br><span class="line">	jwtmiddleware &quot;github.com/iris-contrib/middleware/jwt&quot;</span><br><span class="line">	&quot;github.com/kataras/iris/v12/context&quot;</span><br><span class="line">	&quot;goms/config&quot;</span><br><span class="line">	&quot;goms/datamodels&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	secretKey = []byte(config.GConfig.Jwt.SecretKey)</span><br><span class="line">	exp       = config.GConfig.Jwt.Exp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 生成token</span><br><span class="line">func CreateToken(userId, username string) (tokenString string, err error) &#123;</span><br><span class="line">	token := jwt.New(jwt.SigningMethodHS256)</span><br><span class="line"></span><br><span class="line">	claims := make(jwt.MapClaims)</span><br><span class="line">	claims[&quot;exp&quot;] = time.Now().Add(time.Minute * time.Duration(exp)).Unix()</span><br><span class="line">	claims[&quot;iat&quot;] = time.Now().Unix()</span><br><span class="line">	claims[&quot;username&quot;] = username</span><br><span class="line">	claims[&quot;userId&quot;] = userId</span><br><span class="line"></span><br><span class="line">	token.Claims = claims</span><br><span class="line">	tokenString, err = token.SignedString(secretKey)</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解析token</span><br><span class="line">func ParseToken(tokenSrt string) (claims jwt.MapClaims, err error) &#123;</span><br><span class="line">	token, err := jwt.Parse(tokenSrt, func(*jwt.Token) (interface&#123;&#125;, error) &#123;</span><br><span class="line">		return secretKey, nil</span><br><span class="line">	&#125;)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	claims = token.Claims.(jwt.MapClaims)</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// jwt验证失败返回内容</span><br><span class="line">func OnError(ctx context.Context, err error) &#123;</span><br><span class="line">	if err == nil &#123;</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ctx.StopExecution()</span><br><span class="line">	response := &amp;datamodels.Response&#123;</span><br><span class="line">		Code: 50008,</span><br><span class="line">		Msg:  err.Error(),</span><br><span class="line">	&#125;</span><br><span class="line">	ctx.JSON(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 验证Token</span><br><span class="line">func JwtHandler() *jwtmiddleware.Middleware &#123;</span><br><span class="line">	return jwtmiddleware.New(jwtmiddleware.Config&#123;</span><br><span class="line">		ValidationKeyGetter: func(token *jwt.Token) (i interface&#123;&#125;, e error) &#123;</span><br><span class="line">			return secretKey, nil</span><br><span class="line">		&#125;,</span><br><span class="line">		ErrorHandler:  OnError,</span><br><span class="line">		SigningMethod: jwt.SigningMethodHS256,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><p>因为还没有用户表，就不做验证了，随便返回先<br>services/login_service.go</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package services</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;goms/datamodels&quot;</span><br><span class="line">	&quot;goms/middleware&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type LoginService interface &#123;</span><br><span class="line">	Login(userId, username string) (response datamodels.Response)</span><br><span class="line">	Info(username string) (response datamodels.Response)</span><br><span class="line">	Logout() (response datamodels.Response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type loginService struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewUserService() LoginService &#123;</span><br><span class="line">	return &amp;loginService&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *loginService) Login(userId, username string) (response datamodels.Response) &#123;</span><br><span class="line">	token, err := middleware.CreateToken(userId, username)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		response.Code = 50001</span><br><span class="line">		response.Msg = fmt.Sprintf(&quot;用户登陆失败：%v&quot;, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = 20000</span><br><span class="line">	response.Msg = &quot;Login success&quot;</span><br><span class="line">	data := map[string]string&#123;</span><br><span class="line">		&quot;token&quot;: token,</span><br><span class="line">	&#125;</span><br><span class="line">	response.Data = data</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *loginService) Info(tokenString string) (response datamodels.Response) &#123;</span><br><span class="line">	claims, _ := middleware.ParseToken(tokenString)</span><br><span class="line">	username := claims[&quot;username&quot;].(string)</span><br><span class="line"></span><br><span class="line">	response.Code = 20000</span><br><span class="line">	response.Msg = &quot;success&quot;</span><br><span class="line">	response.Data = map[string]interface&#123;&#125;&#123;</span><br><span class="line">		&quot;avatar&quot;:   &quot;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&quot;,</span><br><span class="line">		&quot;id&quot;:       &quot;5d917402a0096e54c0140f07&quot;,</span><br><span class="line">		&quot;username&quot;: username,</span><br><span class="line">		&quot;roles&quot;:    []string&#123;&quot;admin&quot;&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *loginService) Logout() (response datamodels.Response) &#123;</span><br><span class="line">	response.Code = 20000</span><br><span class="line">	response.Msg = &quot;Logout success&quot;</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Web请求"><a href="#Web请求" class="headerlink" title="Web请求"></a>Web请求</h3><p>暂时还没有验证用户信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package controllers</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/kataras/iris/v12&quot;</span><br><span class="line">	&quot;goms/datamodels&quot;</span><br><span class="line">	services2 &quot;goms/services&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type LoginController struct &#123;</span><br><span class="line">	Ctx     iris.Context</span><br><span class="line">	Service services2.LoginService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewLoginController() *LoginController &#123;</span><br><span class="line">	return &amp;LoginController&#123;</span><br><span class="line">		Service: services2.NewUserService(),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *LoginController) PostLogin() (response datamodels.Response) &#123;</span><br><span class="line">	return u.Service.Login(&quot;xxxx&quot;, &quot;wisp&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *LoginController) PostLogout() (response datamodels.Response) &#123;</span><br><span class="line">	return u.Service.Logout()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *LoginController) GetInfo() (response datamodels.Response) &#123;</span><br><span class="line">	tokenString := u.Ctx.URLParam(&quot;token&quot;)</span><br><span class="line">	return u.Service.Info(tokenString)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由添加Jwt验证"><a href="#路由添加Jwt验证" class="headerlink" title="路由添加Jwt验证"></a>路由添加Jwt验证</h3><p>route/route.go</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package route</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;github.com/kataras/iris/v12&quot;</span><br><span class="line">	&quot;github.com/kataras/iris/v12/mvc&quot;</span><br><span class="line">	&quot;goms/controllers&quot;</span><br><span class="line">	&quot;goms/middleware&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func InitRoute(app *iris.Application) &#123;</span><br><span class="line">	mvc.Configure(app.Party(&quot;/user&quot;), func(m *mvc.Application) &#123;</span><br><span class="line">		m.Handle(controllers.NewLoginController())</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	bathPath := &quot;/api/v1&quot;</span><br><span class="line">	mvc.Configure(app.Party(bathPath+&quot;/games&quot;), func(m *mvc.Application) &#123;</span><br><span class="line">		m.Router.Use(middleware.JwtHandler().Serve)</span><br><span class="line">		m.Handle(controllers.NewGameController())</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="来一波测试"><a href="#来一波测试" class="headerlink" title="来一波测试"></a>来一波测试</h3><p>main_test.go</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;encoding/json&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;github.com/kataras/iris/v12/httptest&quot;</span><br><span class="line">	&quot;goms/datamodels&quot;</span><br><span class="line">	&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func getJwtHeaders(t *testing.T) map[string]string &#123;</span><br><span class="line">	app := newApp()</span><br><span class="line">	e := httptest.New(t, app)</span><br><span class="line">	response := datamodels.Response&#123;&#125;</span><br><span class="line">	body := e.POST(&quot;/user/login&quot;).Expect().Status(httptest.StatusOK).Body().Raw()</span><br><span class="line">	json.Unmarshal([]byte(body), &amp;response)</span><br><span class="line">	token := response.Data.(map[string]interface&#123;&#125;)[&quot;token&quot;].(string)</span><br><span class="line">	tokenHeaders := map[string]string&#123;</span><br><span class="line">		&quot;Authorization&quot;: fmt.Sprintf(&quot;Bearer %s&quot;, token),</span><br><span class="line">	&#125;</span><br><span class="line">	return tokenHeaders</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestNewApp(t *testing.T) &#123;</span><br><span class="line">	app := newApp()</span><br><span class="line">	e := httptest.New(t, app)</span><br><span class="line">	e.POST(&quot;/user/login&quot;).Expect().Status(httptest.StatusOK).JSON().</span><br><span class="line">		Object().ContainsKey(&quot;code&quot;).ValueEqual(&quot;code&quot;, 20000)</span><br><span class="line"></span><br><span class="line">	tokenHeaders := getJwtHeaders(t)</span><br><span class="line"></span><br><span class="line">	e.POST(&quot;/api/v1/games&quot;).Expect().Status(httptest.StatusOK).JSON().</span><br><span class="line">		Object().ContainsKey(&quot;code&quot;).ValueEqual(&quot;code&quot;, 50008)</span><br><span class="line">	e.POST(&quot;/api/v1/games&quot;).WithHeaders(tokenHeaders).Expect().Status(httptest.StatusOK).JSON().</span><br><span class="line">		Object().ContainsKey(&quot;code&quot;).ValueEqual(&quot;code&quot;, 20000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>go test验证一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wisp@wisp-System-Product-Name:~/go/src/goms$ go test -v</span><br><span class="line">=== RUN   TestNewApp</span><br><span class="line">--- PASS: TestNewApp (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      goms    0.012s</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>iris</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>python 操作excel</title>
    <url>/python-%E6%93%8D%E4%BD%9Cexcel.html</url>
    <content><![CDATA[<h3 id="安装第三方库："><a href="#安装第三方库：" class="headerlink" title="安装第三方库："></a>安装第三方库：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure>

<h3 id="存Excel文件："><a href="#存Excel文件：" class="headerlink" title="存Excel文件："></a>存Excel文件：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line"> </span><br><span class="line">workbook = Workbook()</span><br><span class="line">booksheet = workbook.active     #获取当前活跃的sheet,默认是第一个sheet</span><br><span class="line">#存第一行单元格cell(1,1)</span><br><span class="line">booksheet.cell(1,1).value = 6   #这个方法索引从1开始</span><br><span class="line">booksheet.cell(&quot;B1&quot;).value = 7</span><br><span class="line">#存一行数据</span><br><span class="line">booksheet.append([11,87])</span><br><span class="line">workbook.save(&quot;test_openpyxl.xlsx&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="读Excel文件"><a href="#读Excel文件" class="headerlink" title="读Excel文件"></a>读Excel文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from openpyxl import load_workbook</span><br><span class="line"> </span><br><span class="line">workbook = load_workbook(&apos;D:\\Py_exercise\\test_openpyxl.xlsx&apos;)</span><br><span class="line">#booksheet = workbook.active                #获取当前活跃的sheet,默认是第一个sheet</span><br><span class="line">sheets = workbook.get_sheet_names()         #从名称获取sheet</span><br><span class="line">booksheet = workbook.get_sheet_by_name(sheets[0])</span><br><span class="line"> </span><br><span class="line">rows = booksheet.rows</span><br><span class="line">columns = booksheet.columns</span><br><span class="line">#迭代所有的行</span><br><span class="line">for row in rows:</span><br><span class="line">    line = [col.value for col in row]</span><br><span class="line"> </span><br><span class="line">#通过坐标读取值</span><br><span class="line">cell_11 = booksheet.cell(&apos;A1&apos;).value</span><br><span class="line">cell_11 = booksheet.cell(row=1, column=1).value</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>golang iris 学习一: 使用MVC模式+Mongo数据库</title>
    <url>/golang-iris-%E5%AD%A6%E4%B9%A0%E4%B8%80-%E4%BD%BF%E7%94%A8MVC%E6%A8%A1%E5%BC%8F-Mongo%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content><![CDATA[<p>最近有时间，重新把Golang学习了一下，得搞点东西练练手，看着能不能用Golang Iris把Python Flask的后台重写一下，刚好golang更新了mod模式，试用一把！！！<br>系统环境：ubuntu18.04<br>golang版本：1.13<br>mongo: 随便docker run出来的</p>
<a id="more"></a>

<p>目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   └── config.go</span><br><span class="line">├── config.yml</span><br><span class="line">├── controllers</span><br><span class="line">│   └── game_controller.go</span><br><span class="line">├── datamodels</span><br><span class="line">│   ├── game.go</span><br><span class="line">│   └── response.go</span><br><span class="line">├── datasource</span><br><span class="line">│   └── mongo.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">├── repo</span><br><span class="line">│   └── game_repo.go</span><br><span class="line">├── route</span><br><span class="line">│   └── route.go</span><br><span class="line">└── services</span><br><span class="line">    └── game_service.go</span><br></pre></td></tr></table></figure>

<p>先定义一个模型吧，就是跟Python SQLALCHEMY的数据库结构一个道理，来个简单的走起：</p>
<p>datamodels目录存放数据模型</p>
<p>datamodels/game.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datamodels</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Game <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       bson.ObjectId <span class="string">`json:"_id" bson:"_id"`</span></span><br><span class="line">    Name     <span class="keyword">string</span>        <span class="string">`json:"name" bson:"name"`</span></span><br><span class="line">    GameCode <span class="keyword">string</span>        <span class="string">`json:"gamecode" bson:"gamecode"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个通用数据返回模型，返回给前端用的</p>
<p>datamodels/response.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datamodels</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">	Code <span class="keyword">int</span>         <span class="string">`json:"code"`</span></span><br><span class="line">	Msg  <span class="keyword">string</span>      <span class="string">`json:"msg"`</span></span><br><span class="line">	Data <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"data"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后得连接数据库，先搞份数据库配置：</p>
<p>config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mongo:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">~</span></span><br><span class="line"><span class="attr">  pass:</span> <span class="string">~</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">oms</span></span><br></pre></td></tr></table></figure>

<p>然后把配置文件转成结构体</p>
<p>config/config.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"gopkg.in/yaml.v2"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mongoConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Host <span class="keyword">string</span> <span class="string">`yaml:"host"`</span></span><br><span class="line">	Port <span class="keyword">int</span>    <span class="string">`yaml:"port"`</span></span><br><span class="line">	User <span class="keyword">string</span> <span class="string">`yaml:"user"`</span></span><br><span class="line">	Pass <span class="keyword">string</span> <span class="string">`yaml:"pass"`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`yaml:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> globalConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Mongo mongoConfig <span class="string">`yaml:"mongo"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> GConfig = &amp;globalConfig&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	yamlFile, err := ioutil.ReadFile(<span class="string">"config.yml"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err = yaml.Unmarshal(yamlFile, GConfig)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">"Unmarshal: %v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着需要连接数据库</p>
<p>datasource目录存放初始化数据库连接</p>
<p>datasource/mongo.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"goms/config"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	session *mgo.Session</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dialInfo := &amp;mgo.DialInfo&#123;</span><br><span class="line">		Addrs:          []<span class="keyword">string</span>&#123;config.GConfig.Mongo.Host&#125;,</span><br><span class="line">		Direct:         <span class="literal">false</span>,</span><br><span class="line">		Timeout:        time.Second * <span class="number">60</span>,</span><br><span class="line">		FailFast:       <span class="literal">false</span>,</span><br><span class="line">		Database:       config.GConfig.Mongo.Name,</span><br><span class="line">		ReplicaSetName: <span class="string">""</span>,</span><br><span class="line">		Source:         <span class="string">""</span>,</span><br><span class="line">		Service:        <span class="string">""</span>,</span><br><span class="line">		ServiceHost:    <span class="string">""</span>,</span><br><span class="line">		Mechanism:      <span class="string">""</span>,</span><br><span class="line">		Username:       <span class="string">""</span>,</span><br><span class="line">		Password:       <span class="string">""</span>,</span><br><span class="line">		PoolLimit:      <span class="number">4096</span>,</span><br><span class="line">		DialServer:     <span class="literal">nil</span>,</span><br><span class="line">		Dial:           <span class="literal">nil</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	sess, err := mgo.DialWithInfo(dialInfo)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	session = sess</span><br><span class="line">	session.SetMode(mgo.Monotonic, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SessionStore <span class="keyword">struct</span> &#123;</span><br><span class="line">	session *mgo.Session</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSessionStore</span><span class="params">()</span> *<span class="title">SessionStore</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;SessionStore&#123;</span><br><span class="line">		session: session.Copy(),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SessionStore)</span> <span class="title">C</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">mgo</span>.<span class="title">Collection</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.session.DB(config.GConfig.Mongo.Name).C(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SessionStore)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s.session.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetErrNotFound</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> mgo.ErrNotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来个CRUD操作</p>
<p>repo目录存放操作数据库的方法</p>
<p>repo/game_repo.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> repo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/datasource"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GamesRepository <span class="keyword">interface</span> &#123;</span><br><span class="line">	List(query <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) (games []datamodels.Game, err error)</span><br><span class="line">	Save(game datamodels.Game) (err error)</span><br><span class="line">	GetByID(id <span class="keyword">string</span>) (game datamodels.Game, err error)</span><br><span class="line">	DeleteByID(id <span class="keyword">string</span>) (err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> gamesRepository <span class="keyword">struct</span> &#123;</span><br><span class="line">	collection <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGamesRepository</span><span class="params">()</span> <span class="title">GamesRepository</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;gamesRepository&#123;</span><br><span class="line">		collection: <span class="string">"project_games"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">List</span><span class="params">(query <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(games []datamodels.Game, err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err = col.Find(<span class="literal">nil</span>).All(&amp;games); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err.Error() != datasource.GetErrNotFound().Error() &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">Save</span><span class="params">(game datamodels.Game)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> game.ID.Hex() == <span class="string">""</span> &#123;</span><br><span class="line">		game.ID = bson.NewObjectId()</span><br><span class="line">		err = col.Insert(game)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		err = col.Update(bson.M&#123;<span class="string">"_id"</span>: game.ID&#125;, game)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">GetByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(game datamodels.Game, err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	err = col.FindId(bson.ObjectIdHex(id)).One(&amp;game)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gamesRepository)</span> <span class="title">DeleteByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	db := datasource.NewSessionStore()</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">	col := db.C(g.collection)</span><br><span class="line"></span><br><span class="line">	err = col.RemoveId(bson.ObjectIdHex(id))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service目录调用repo方法得出最后的结果并整理</p>
<p>service/game_service.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/repo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GameService <span class="keyword">interface</span> &#123;</span><br><span class="line">	List(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) (response datamodels.Response)</span><br><span class="line">	Save(game datamodels.Game) (response datamodels.Response)</span><br><span class="line">	GetByID(id <span class="keyword">string</span>) (response datamodels.Response)</span><br><span class="line">	DeleteByID(id <span class="keyword">string</span>) (response datamodels.Response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> gameService <span class="keyword">struct</span> &#123;</span><br><span class="line">	repo repo.GamesRepository</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gameRepo = repo.NewGamesRepository()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGameService</span><span class="params">()</span> <span class="title">GameService</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;gameService&#123;</span><br><span class="line">		repo: gameRepo,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">List</span><span class="params">(m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	games, _ := g.repo.List(<span class="literal">nil</span>)</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	response.Data = games</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">Save</span><span class="params">(game datamodels.Game)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	err := g.repo.Save(game)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">30001</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"保存数据失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">GetByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	game, err := g.repo.GetByID(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">30002</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"查询数据失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	response.Data = game</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *gameService)</span> <span class="title">DeleteByID</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	err := g.repo.DeleteByID(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">30003</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"删除数据失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	response.Code = <span class="number">20000</span></span><br><span class="line">	response.Msg = <span class="string">"success"</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controllers响应Web请求</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris"</span></span><br><span class="line">	<span class="string">"goms/datamodels"</span></span><br><span class="line">	<span class="string">"goms/services"</span></span><br><span class="line">	<span class="string">"gopkg.in/mgo.v2/bson"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GameController <span class="keyword">struct</span> &#123;</span><br><span class="line">	Ctx     iris.Context</span><br><span class="line">	Service services.GameService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGameController</span><span class="params">()</span> *<span class="title">GameController</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;GameController&#123;</span><br><span class="line">		Service: services.NewGameService(),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">Get</span><span class="params">()</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> g.Service.List(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">GetBy</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> g.Service.GetByID(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">DeleteBy</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> g.Service.DeleteByID(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">PutBy</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	game := datamodels.Game&#123;&#125;</span><br><span class="line">	err := g.Ctx.ReadJSON(&amp;game)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">40001</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"参数解析失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	game.ID = bson.ObjectIdHex(id)</span><br><span class="line">	<span class="keyword">return</span> g.Service.Save(game)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GameController)</span> <span class="title">Post</span><span class="params">()</span> <span class="params">(response datamodels.Response)</span></span> &#123;</span><br><span class="line">	game := datamodels.Game&#123;&#125;</span><br><span class="line">	err := g.Ctx.ReadJSON(&amp;game)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		response.Code = <span class="number">40001</span></span><br><span class="line">		response.Msg = fmt.Sprintf(<span class="string">"参数解析失败：%v"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> g.Service.Save(game)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>route生成路由</p>
<p>route/route.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/kataras/iris"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/mvc"</span></span><br><span class="line">	<span class="string">"goms/controllers"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRoute</span><span class="params">(app *iris.Application)</span></span> &#123;</span><br><span class="line">	bathPath := <span class="string">"/api/v1"</span></span><br><span class="line">	mvc.New(app.Party(bathPath + <span class="string">"/games"</span>)).Handle(controllers.NewGameController())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>入口程序main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="comment">//"github.com/iris-contrib/middleware/cors"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/middleware/logger"</span></span><br><span class="line">	<span class="string">"github.com/kataras/iris/middleware/recover"</span></span><br><span class="line">	<span class="string">"goms/route"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newApp</span><span class="params">()</span> *<span class="title">iris</span>.<span class="title">Application</span></span> &#123;</span><br><span class="line">	app := iris.New()</span><br><span class="line">	app.Use(<span class="built_in">recover</span>.New())</span><br><span class="line">	app.Use(logger.New())</span><br><span class="line">	app.AllowMethods(iris.MethodOptions)</span><br><span class="line">	<span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	app := newApp()</span><br><span class="line">	route.InitRoute(app)</span><br><span class="line">	app.Run(iris.Addr(<span class="string">":8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>go run跑起来~~</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>go</tag>
        <tag>golang</tag>
        <tag>iris</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu wine 修改字体</title>
    <url>/Ubuntu-wine-%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93.html</url>
    <content><![CDATA[<p>今天在Ubuntu安装WPS的时候，修复WPS的字体报错，从Windows复制了几个字体过来重新生成了一下缓存，突然WineQQ和微信的字体也变了，摸索了一下修改一发Wine字体：</p>
<a id="more"></a>

<p>每个wine程序都有自己的一套字体目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/home/wisp/.deepinwine/Deepin-QQLight/drive_c/windows/Fonts/</span><br><span class="line">/home/wisp/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts/</span><br></pre></td></tr></table></figure>

<p>下载simsun.ttc 字体，放到各个程序的Fonts目录下面去，然后创建注册表：<br>zh.reg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;FixedSys&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helv&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helvetica&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Sans Serif&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;System&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tms Rmn&quot;=&quot;simsun&quot;</span><br></pre></td></tr></table></figure>

<p>导入zh.reg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINEPREFIX=&quot;/home/wisp/.deepinwine/Deepin-QQLight/&quot; deepin-wine  regedit zh.reg</span><br><span class="line">WINEPREFIX=&quot;/home/wisp/.deepinwine/Deepin-WeChat/&quot; deepin-wine  regedit zh.reg</span><br></pre></td></tr></table></figure>

<p>打开QQ，喵喵效果<br>搞完收工~</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Json序列化时时间处理</title>
    <url>/Python-Json%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86.html</url>
    <content><![CDATA[<p>在Python使用Json序列化字典的时候,如果遇到值是Datetime,Date格式的会报错,总不能手工一个个转,今天查了一下,可以使用dumps的default参数指定一个函数,loads的object_hook指定一个函数,解决这些转换问题</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">from datetime import datetime, date</span><br><span class="line"></span><br><span class="line">def json_dumps_default(obj):</span><br><span class="line">    if isinstance(obj, datetime):</span><br><span class="line">        return obj.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">    elif isinstance(obj, date):</span><br><span class="line">        return obj.strftime(&apos;%Y-%m-%d&apos;)</span><br><span class="line">    else:</span><br><span class="line">        return obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def json_loads_hook(dct):</span><br><span class="line">    for k, v in dct.items():</span><br><span class="line">        if k in [&quot;onlinedate&quot;, &quot;pre_onlinedate&quot;, &quot;mergedate&quot;]:</span><br><span class="line">            try:</span><br><span class="line">                dct[k] = datetime.strptime(v, &apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line">    return dct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    data = &#123;&quot;onlinedate&quot;: &quot;2019-11-15 16:30:36&quot;, &quot;name&quot;: &quot;wisp888&quot;&#125;</span><br><span class="line"></span><br><span class="line">    d1 = json.dumps(data)</span><br><span class="line">    print(d1)</span><br><span class="line"></span><br><span class="line">    d2 = json.loads(d1, object_hook=json_loads_hook)</span><br><span class="line">    print(d2)</span><br><span class="line"></span><br><span class="line">    d3 = json.dumps(d2, default=json_dumps_default)</span><br><span class="line">    print(d3)</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;onlinedate&quot;: &quot;2019-11-15 16:30:36&quot;, &quot;name&quot;: &quot;wisp888&quot;&#125;</span><br><span class="line">&#123;&apos;onlinedate&apos;: datetime.datetime(2019, 11, 15, 16, 30, 36), &apos;name&apos;: &apos;wisp888&apos;&#125;</span><br><span class="line">&#123;&quot;onlinedate&quot;: &quot;2019-11-15 16:30:36&quot;, &quot;name&quot;: &quot;wisp888&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb 数据备份与恢复</title>
    <url>/mongodb%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D.html</url>
    <content><![CDATA[<h3 id="mongodump-备份数据库"><a href="#mongodump-备份数据库" class="headerlink" title="mongodump 备份数据库"></a>mongodump 备份数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongodump -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径</span><br></pre></td></tr></table></figure>
<ul>
<li>不指定-d 则导出所有数据库</li>
</ul>
<a id="more"></a>

<h3 id="mongorestore还原数据库"><a href="#mongorestore还原数据库" class="headerlink" title="mongorestore还原数据库"></a>mongorestore还原数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongorestore -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 文件存在路径</span><br></pre></td></tr></table></figure>
<ul>
<li>–drop表示先删除所有记录，再导入备份</li>
</ul>
<h3 id="mongoexport-备份数据库指定表"><a href="#mongoexport-备份数据库指定表" class="headerlink" title="mongoexport 备份数据库指定表"></a>mongoexport 备份数据库指定表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -f 字段 -q 条件导出 --type=csv -o 文件名</span><br></pre></td></tr></table></figure>
<ul>
<li>-f 导出指定字段，以逗号分割</li>
<li>-q 查询语句</li>
<li>–type 默认为json</li>
</ul>
<h3 id="mongoimport-导入表，或者表中部分字段"><a href="#mongoimport-导入表，或者表中部分字段" class="headerlink" title="mongoimport 导入表，或者表中部分字段"></a>mongoimport 导入表，或者表中部分字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --type=csv --upsert --file 文件名</span><br></pre></td></tr></table></figure>
<ul>
<li>–upsert 插入或者更新现有数据</li>
<li>–type 指定备份文件的类型</li>
<li>–headline 表示不导入首行</li>
</ul>
<h3 id="举个粟子"><a href="#举个粟子" class="headerlink" title="举个粟子"></a>举个粟子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongodump    -d oms -o ./oms.db</span><br><span class="line">mongorestore -d oms --drop oms/</span><br><span class="line">mongoexport  -d oms -c project_channel -o ./project_channel</span><br><span class="line">mongoimport  -d oms -c project_channel project_channel</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 部署flask + vue-element笔记</title>
    <url>/Centos7%20%E9%83%A8%E7%BD%B2flask%20+%20vue-element%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h2 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h2><ul>
<li>/data/www/oms/server 后端</li>
<li>/data/www/oms/client  前端</li>
</ul>
<h2 id="部署vue前端"><a href="#部署vue前端" class="headerlink" title="部署vue前端"></a>部署vue前端</h2><h3 id="一、安装Nodejs"><a href="#一、安装Nodejs" class="headerlink" title="一、安装Nodejs"></a>一、安装Nodejs</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="二、编译vue"><a href="#二、编译vue" class="headerlink" title="二、编译vue"></a>二、编译vue</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /data/www/oms/client</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<h2 id="部署flask后端"><a href="#部署flask后端" class="headerlink" title="部署flask后端"></a>部署flask后端</h2><h3 id="一、安装配置virtualenv"><a href="#一、安装配置virtualenv" class="headerlink" title="一、安装配置virtualenv"></a>一、安装配置virtualenv</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /data/www/oms/server</span><br><span class="line">/usr/local/python3/bin/pip3 install virtualenv</span><br><span class="line">/usr/local/python3/bin/virtualenv --no-site-packages venv</span><br><span class="line">source venv/bin/activate    # 进入虚拟环境</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install Gunicorn</span><br><span class="line">deactivate    # 退出虚拟环境</span><br></pre></td></tr></table></figure>
<h3 id="二、安装配置supervistord"><a href="#二、安装配置supervistord" class="headerlink" title="二、安装配置supervistord"></a>二、安装配置supervistord</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/python3/bin/pip3 install supervisor</span><br><span class="line">/usr/local/python3/bin/echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>注意修改里面的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.ini</span><br></pre></td></tr></table></figure>
<p>添加flask进程/etc/supervisord.d/oms.ini</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:oms-app]</span><br><span class="line">; 下面命令中的 app:app 请修改为你实际部署时的项目名称</span><br><span class="line">command=/data/www/oms/server/venv/bin/gunicorn -w 64 --bind=127.0.0.1:17173 manager:app --access-logfile logs/access.log --error-logfile logs/error.log</span><br><span class="line">;</span><br><span class="line">; ; 下面的路径请修改为你创建的项目的根目录</span><br><span class="line">directory=/data/www/oms/server</span><br><span class="line"></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">;</span><br><span class="line">; 下面的用户请修改为创建该项目的用户</span><br><span class="line">user=root</span><br><span class="line">;</span><br><span class="line">redirect_stderr=true</span><br><span class="line">;</span><br><span class="line">; log 文件的路径你可以重新自定义</span><br><span class="line">stdout_logfile=/data/www/oms/server/supervisor.log</span><br><span class="line"></span><br><span class="line">; 解决编码问题</span><br><span class="line">[supervisord]</span><br><span class="line">environment=LC_ALL=&apos;en_US.UTF-8&apos;,LANG=&apos;en_US.UTF-8&apos;</span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/python3/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">/usr/local/python3/bin/supervisorctl update</span><br><span class="line">/usr/local/python3/bin/supervisorctl status</span><br></pre></td></tr></table></figure>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  oms.lhp.com;</span><br><span class="line">        root  /data/www/oms/client/dist/;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        expires  30d;</span><br><span class="line"></span><br><span class="line">        location ~ /\.svn/     &#123;  return 403; &#125;</span><br><span class="line">        location ~* \.(sh|xls|doc|log|sh|sql|svn|tar|gz|svn-base) &#123;  root ~; deny all; &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /data/nginx_logs/oms_client.access.log;</span><br><span class="line">        error_log   /data/nginx_logs/oms_client.error.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 10002;</span><br><span class="line">        server_name _;</span><br><span class="line">        return 403;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen      10002;</span><br><span class="line">        server_name oms.lhp.com;</span><br><span class="line"></span><br><span class="line">        access_log  /data/nginx_logs/oms_server.access.log;</span><br><span class="line">        error_log   /data/nginx_logs/oms_server.error.log;</span><br><span class="line"></span><br><span class="line">        location /docs &#123;</span><br><span class="line">                allow 183.63.86.194;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        # flask中已设置跨域配置，Nginx不需要重复配置</span><br><span class="line">        proxy_hide_header &apos;Access-Control-Allow-Origin&apos;;</span><br><span class="line">        proxy_pass        http://127.0.0.1:17173;</span><br><span class="line">                proxy_http_version 1.1;</span><br><span class="line">                proxy_set_header   Host             $host;</span><br><span class="line">                proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>reload nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>flask</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>vue</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 mongodb安装笔记</title>
    <url>/Centos7%20mongodb%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h3 id="配置系统源"><a href="#配置系统源" class="headerlink" title="配置系统源"></a>配置系统源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/yum.repos.d/mongodb-org-4.2.repo</span><br><span class="line"></span><br><span class="line">[mongodb-org-4.2]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.2/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br><span class="line">systemctl start mongod.service</span><br></pre></td></tr></table></figure>

<h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123; user:&quot;root&quot;, pwd:&quot;123456&quot;, roles:[&quot;root&quot;] &#125;)</span><br><span class="line">use test</span><br><span class="line">db.createUser(&#123; user:&quot;admin&quot;, pwd:&quot;123456&quot;, roles:[&quot;dbOwner&quot;] &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件-etc-mongod-conf"><a href="#修改配置文件-etc-mongod-conf" class="headerlink" title="修改配置文件/etc/mongod.conf"></a>修改配置文件/etc/mongod.conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mongod.conf</span><br><span class="line"></span><br><span class="line"># for documentation of all options, see:</span><br><span class="line">#   http://docs.mongodb.org/manual/reference/configuration-options/</span><br><span class="line"></span><br><span class="line"># where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br><span class="line"></span><br><span class="line"># Where and how to store data.</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongo</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">#  engine:</span><br><span class="line">#  wiredTiger:</span><br><span class="line"></span><br><span class="line"># how the process runs</span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: &quot;enabled&quot;</span><br><span class="line"></span><br><span class="line">#operationProfiling:</span><br><span class="line"></span><br><span class="line">#replication:</span><br><span class="line"></span><br><span class="line">#sharding:</span><br><span class="line"></span><br><span class="line">## Enterprise-Only Options</span><br><span class="line"></span><br><span class="line">#auditLog:</span><br><span class="line"></span><br><span class="line">#snmp:</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
</search>
